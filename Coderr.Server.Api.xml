<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Coderr.Server.Api</name>
    </assembly>
    <members>
        <member name="T:Coderr.Server.Api.AuthorizeRolesAttribute">
            <summary>
                Authorize on specific roles.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.AuthorizeRolesAttribute.#ctor(System.String[])">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.AuthorizeRolesAttribute" />.
            </summary>
            <param name="roles">roles granted access</param>
        </member>
        <member name="P:Coderr.Server.Api.AuthorizeRolesAttribute.Roles">
            <summary>
                Roles granted access
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.CommandAttribute">
            <summary>
            Marker attribute to tell which DTOs are commands
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Accounts.Commands.DeclineInvitation">
            <summary>
                Invited person do not want to accept the invitation
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Accounts.Commands.DeclineInvitation.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Accounts.Commands.DeclineInvitation.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Accounts.Commands.DeclineInvitation" />.
            </summary>
            <param name="invitationId">invitation key (typically a guid)</param>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Commands.DeclineInvitation.InvitationId">
            <summary>
                Invitation key (typically a guid)
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Accounts.Commands.RegisterAccount">
            <summary>
                Register a new account and send out an activation email.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Accounts.Commands.RegisterAccount.#ctor(System.String,System.String,System.String)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Accounts.Commands.RegisterAccount" />
            </summary>
            <param name="userName">User name</param>
            <param name="password">Password as entered by the user</param>
            <param name="email">Email address</param>
        </member>
        <member name="M:Coderr.Server.Api.Core.Accounts.Commands.RegisterAccount.#ctor">
            <summary>
                Serialization constructor.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Commands.RegisterAccount.AccountId">
            <summary>
                Use a specific account id
            </summary>
            <remarks>
                <para>0 = auto increment</para>
            </remarks>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Commands.RegisterAccount.ActivateDirectly">
            <summary>
                do not send an activation email, activate the account directly.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Commands.RegisterAccount.Email">
            <summary>
                Email address.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Commands.RegisterAccount.Password">
            <summary>
                Password as entered by the user.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Commands.RegisterAccount.UserName">
            <summary>
                User name
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Accounts.Commands.RegisterAccount.Activate(System.Int32)">
            <summary>
                Activate this account directly
            </summary>
            <param name="accountId">Id of the account</param>
        </member>
        <member name="T:Coderr.Server.Api.Core.Accounts.Commands.RequestPasswordReset">
            <summary>
                Request a password reset (i.e. lock account, email an activation link to the user and wait for activation).
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Accounts.Commands.RequestPasswordReset.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Accounts.Commands.RequestPasswordReset.#ctor(System.String)">
            <summary>
                Create a new instance of <see cref="T:Coderr.Server.Api.Core.Accounts.Commands.RequestPasswordReset" />.
            </summary>
            <param name="emailAddress">Email address associated with the user account.</param>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Commands.RequestPasswordReset.EmailAddress">
            <summary>
                Email address associated with the user account.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Accounts.Events.AccountActivated">
            <summary>
                Published when the user have clicked on the activation link in the registration email.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Accounts.Events.AccountActivated.#ctor(System.Int32,System.String)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Accounts.Events.AccountActivated" />-
            </summary>
            <param name="accountId">Primary key for the created account</param>
            <param name="userName">user name that the account was created with.</param>
        </member>
        <member name="M:Coderr.Server.Api.Core.Accounts.Events.AccountActivated.#ctor">
            <summary>
                Serialization constructor.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Events.AccountActivated.AccountId">
            <summary>
                Primary key for the account
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Events.AccountActivated.EmailAddress">
            <summary>
                Email address associated with the account.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Events.AccountActivated.UserName">
            <summary>
                Unique user name
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Accounts.Events.AccountRegistered">
            <summary>
                An user have registered an account and activated it.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Accounts.Events.AccountRegistered.#ctor(System.Int32,System.String)">
            <summary>
                Create a new instance of <see cref="T:Coderr.Server.Api.Core.Accounts.Events.AccountRegistered" />-
            </summary>
            <param name="accountId">Account id (primary key).</param>
            <param name="userName">User name as entered by the user.</param>
        </member>
        <member name="M:Coderr.Server.Api.Core.Accounts.Events.AccountRegistered.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Events.AccountRegistered.AccountId">
            <summary>
                Account id (primary key).
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Events.AccountRegistered.IsSysAdmin">
            <summary>
                The registered user is a system administrator
            </summary>
            <remarks>
                <para>
                    System administrators can create new applications, decide who is application administrator
                    and configure other system wide settings.
                </para>
            </remarks>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Events.AccountRegistered.UserName">
            <summary>
                User name as entered by the user.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Accounts.Events.InvitationAccepted">
            <summary>
                A user have accepted an invitation.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Accounts.Events.InvitationAccepted.#ctor(System.Int32,System.String,System.String)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Accounts.Events.InvitationAccepted" />.
            </summary>
            <param name="accountId">account that accepted the invitation</param>
            <param name="invitedByUserName">user that made the invite</param>
            <param name="userName">userName of the person that accepted the invitation</param>
            <exception cref="T:System.ArgumentNullException">invitedByUserName; userName</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">accountId</exception>
        </member>
        <member name="M:Coderr.Server.Api.Core.Accounts.Events.InvitationAccepted.#ctor">
            <summary>
                Serialization constructor.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Events.InvitationAccepted.AcceptedEmailAddress">
            <summary>
                The email that the invitation was accepted by.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Events.InvitationAccepted.AccountId">
            <summary>
                Id of the user that accepted the invitation
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Events.InvitationAccepted.ApplicationIds">
            <summary>
                Applications that the user got access to.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Events.InvitationAccepted.InvitedByUserName">
            <summary>
                User that created the invite.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Events.InvitationAccepted.InvitedEmailAddress">
            <summary>
                Email address that the invitation was sent to.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Events.InvitationAccepted.UserName">
            <summary>
                The user that accepted the invitation
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Accounts.Events.LoginFailed">
            <summary>
                A login attempt failed
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Accounts.Events.LoginFailed.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Accounts.Events.LoginFailed" />.
            </summary>
            <param name="userName">user that attempted to login (userName was entered by the user, it might not exist)</param>
            <exception cref="T:System.ArgumentNullException">userName</exception>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Events.LoginFailed.InvalidLogin">
            <summary>
                If failed login was the reason (can't be set at the same time as <see cref="P:Coderr.Server.Api.Core.Accounts.Events.LoginFailed.IsLocked" />)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Events.LoginFailed.IsActivated">
            <summary>
                If account have been activated after registration.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Events.LoginFailed.IsLocked">
            <summary>
                If account was or became locked.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Events.LoginFailed.UserName">
            <summary>
                user that attempted to login (userName was entered by the user, it might not exist)
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Accounts.NamespaceDoc">
            <summary>
                Account information (i.e. authentication and authorization)
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:Coderr.Server.Api.Core.Accounts.Queries.AccountDTO">
            <summary>
                Account entity subset.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Queries.AccountDTO.CreatedAtUtc">
            <summary>
                When the account was created
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Queries.AccountDTO.Email">
            <summary>
                Associated email address.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Queries.AccountDTO.Id">
            <summary>
                Primary key
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Queries.AccountDTO.LastLoginAtUtc">
            <summary>
                Last time user logged in.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Queries.AccountDTO.State">
            <summary>
                Current account state
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Queries.AccountDTO.UpdatedAtUtc">
            <summary>
                When the account was updated (changed first name etc)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Queries.AccountDTO.UserName">
            <summary>
                Username
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Accounts.Queries.AccountState">
            <summary>
                Account state
            </summary>
        </member>
        <member name="F:Coderr.Server.Api.Core.Accounts.Queries.AccountState.VerificationRequired">
            <summary>
                Account have been created but not yet verified.
            </summary>
        </member>
        <member name="F:Coderr.Server.Api.Core.Accounts.Queries.AccountState.Active">
            <summary>
                Account is active
            </summary>
        </member>
        <member name="F:Coderr.Server.Api.Core.Accounts.Queries.AccountState.Locked">
            <summary>
                Account have been locked, typically by too many login attempts.
            </summary>
        </member>
        <member name="F:Coderr.Server.Api.Core.Accounts.Queries.AccountState.ResetPassword">
            <summary>
                Password reset have been requested (an password reset link have been sent).
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Accounts.Queries.FindAccountByUserName">
            <summary>
                Find an account by the given user name
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Accounts.Queries.FindAccountByUserName.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Accounts.Queries.FindAccountByUserName" />.
            </summary>
            <param name="userName">user name</param>
        </member>
        <member name="M:Coderr.Server.Api.Core.Accounts.Queries.FindAccountByUserName.#ctor">
            <summary>
                Serialization constructor.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Queries.FindAccountByUserName.UserName">
            <summary>
                Username
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Accounts.Queries.FindAccountByUserNameResult">
            <summary>
                Result for <see cref="T:Coderr.Server.Api.Core.Accounts.Queries.FindAccountByUserName" />.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Accounts.Queries.FindAccountByUserNameResult.#ctor(System.Int32,System.String)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Accounts.Queries.FindAccountByUserNameResult" />.
            </summary>
            <param name="accountId">account id</param>
            <param name="displayName">Either username or FirstName LastName depending on what's available.</param>
            <exception cref="T:System.ArgumentNullException">displayName</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">accountId</exception>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Queries.FindAccountByUserNameResult.AccountId">
            <summary>
                Account id
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Queries.FindAccountByUserNameResult.DisplayName">
            <summary>
                Either username or FirstName LastName depending on what's available.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Accounts.Queries.GetAccountById">
            <summary>
                Get account information.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Accounts.Queries.GetAccountById.#ctor(System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Accounts.Queries.GetAccountById" />.
            </summary>
            <param name="accountId">Account id.</param>
        </member>
        <member name="M:Coderr.Server.Api.Core.Accounts.Queries.GetAccountById.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Queries.GetAccountById.AccountId">
            <summary>
                Account id.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Accounts.Queries.GetAccountEmailById">
            <summary>
                Get email for a specific account
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Accounts.Queries.GetAccountEmailById.#ctor(System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Accounts.Queries.GetAccountById" />.
            </summary>
            <param name="accountId">account</param>
        </member>
        <member name="M:Coderr.Server.Api.Core.Accounts.Queries.GetAccountEmailById.#ctor">
            <summary>
                Serialization constructor.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Queries.GetAccountEmailById.AccountId">
            <summary>
                Account
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Accounts.RegisterSimple">
            <summary>
                Register using email address only.
            </summary>
            <remarks>
                <para>
                    A temporary password is generated and included in the eamil. The user name is generated from
                    the name part of the email address.
                </para>
            </remarks>
        </member>
        <member name="M:Coderr.Server.Api.Core.Accounts.RegisterSimple.#ctor(System.String)">
            <summary>
                Create a new instance of <see cref="T:Coderr.Server.Api.Core.Accounts.RegisterSimple" />.
            </summary>
            <param name="emailAddress">Email address</param>
            <exception cref="T:System.ArgumentNullException">emailAddress</exception>
        </member>
        <member name="M:Coderr.Server.Api.Core.Accounts.RegisterSimple.#ctor">
            <summary>
                Serialization constructor.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.RegisterSimple.EmailAddress">
            <summary>
                Email address
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Accounts.Requests.AcceptInvitation">
            <summary>
                You must create an account before accepting the invitation
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Accounts.Requests.AcceptInvitation.#ctor(System.String,System.String,System.String)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Accounts.Requests.AcceptInvitation" />.
            </summary>
            <param name="userName">username</param>
            <param name="password">clear text password</param>
            <param name="invitationKey">Key from the generated email.</param>
        </member>
        <member name="M:Coderr.Server.Api.Core.Accounts.Requests.AcceptInvitation.#ctor(System.Int32,System.String)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Accounts.Requests.AcceptInvitation" />.
            </summary>
            <param name="accountId">Existing account</param>
            <param name="invitationKey">Key from the generated email.</param>
            <remarks>
                <para>
                    Invite to an existing account.
                </para>
            </remarks>
        </member>
        <member name="M:Coderr.Server.Api.Core.Accounts.Requests.AcceptInvitation.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Requests.AcceptInvitation.AcceptedEmail">
            <summary>
                The email that was used when creating an account.
            </summary>
            <remarks>
                <para>
                    Do note that this email can be different compared to the one that was used when sending the invitation. Make
                    sure that this one is assigned to the created account.
                </para>
            </remarks>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Requests.AcceptInvitation.AccountId">
            <summary>
                Invite to an existing account
            </summary>
            <remarks>
                <para>
                    Alternative to the <see cref="P:Coderr.Server.Api.Core.Accounts.Requests.AcceptInvitation.UserName" />/<see cref="P:Coderr.Server.Api.Core.Accounts.Requests.AcceptInvitation.Password" /> combination
                </para>
            </remarks>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Requests.AcceptInvitation.EmailUsedForTheInvitation">
            <summary>
                Email that the inviation was sent to
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Requests.AcceptInvitation.FirstName">
            <summary>
                First name
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Requests.AcceptInvitation.InvitationKey">
            <summary>
                Invitation key from the invitation email.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Requests.AcceptInvitation.LastName">
            <summary>
                Last name
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Requests.AcceptInvitation.Password">
            <summary>
                Clear text password
            </summary>
            <seealso cref="P:Coderr.Server.Api.Core.Accounts.Requests.AcceptInvitation.UserName" />
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Requests.AcceptInvitation.UserName">
            <summary>
                Username as entered by the user
            </summary>
            <remarks>
                <para>Used together with <see cref="P:Coderr.Server.Api.Core.Accounts.Requests.AcceptInvitation.Password" /></para>
                <para>Alternative to <see cref="P:Coderr.Server.Api.Core.Accounts.Requests.AcceptInvitation.AccountId" /></para>
            </remarks>
        </member>
        <member name="T:Coderr.Server.Api.Core.Accounts.Requests.ChangePassword">
            <summary>
                Change password.
            </summary>
            <remarks>
                <para>
                    Done when the user knows the current one but want to switch. Otherwise use <see cref="T:Coderr.Server.Api.Core.Accounts.Commands.RequestPasswordReset" />.
                </para>
            </remarks>
        </member>
        <member name="M:Coderr.Server.Api.Core.Accounts.Requests.ChangePassword.#ctor(System.String,System.String)">
            <summary>
                Create a new instance of <see cref="T:Coderr.Server.Api.Core.Accounts.Requests.ChangePassword" />.
            </summary>
            <param name="currentPassword">Current password</param>
            <param name="newPassword">Password to change to.</param>
        </member>
        <member name="M:Coderr.Server.Api.Core.Accounts.Requests.ChangePassword.#ctor">
            <summary>
                Serialization constructor.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Requests.ChangePassword.CurrentPassword">
            <summary>
                Current password
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Requests.ChangePassword.NewPassword">
            <summary>
                Password to change to.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Requests.ChangePassword.UserId">
            <summary>
                Assigned by the CQS library
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Accounts.Requests.ValidateNewLoginReply">
            <summary>
                DTO
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Requests.ValidateNewLoginReply.EmailIsTaken">
            <summary>
                The given email address is already associated with an account.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Accounts.Requests.ValidateNewLoginReply.UserNameIsTaken">
            <summary>
                The given user name is already associated with an account.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.ApiKeys.Commands.CreateApiKey">
            <summary>
                Create a new API key
            </summary>
            <remarks>
                <para>API keys are used to be able to communicate with the Coderr server through the HTTP API.</para>
            </remarks>
        </member>
        <member name="M:Coderr.Server.Api.Core.ApiKeys.Commands.CreateApiKey.#ctor(System.String,System.String,System.String,System.Int32[])">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.ApiKeys.Commands.CreateApiKey" />.
            </summary>
            <param name="applicationName">
                <see cref="P:Coderr.Server.Api.Core.ApiKeys.Commands.CreateApiKey.ApplicationName" />
            </param>
            <param name="apiKey">
                <see cref="P:Coderr.Server.Api.Core.ApiKeys.Commands.CreateApiKey.ApiKey" />
            </param>
            <param name="sharedSecret">
                <see cref="P:Coderr.Server.Api.Core.ApiKeys.Commands.CreateApiKey.SharedSecret" />
            </param>
            <param name="applicationIds">
                <see cref="P:Coderr.Server.Api.Core.ApiKeys.Commands.CreateApiKey.ApplicationIds" />
            </param>
            <exception cref="T:System.ArgumentNullException">applicationName;apiKey;sharedSecret;applicationIds</exception>
        </member>
        <member name="M:Coderr.Server.Api.Core.ApiKeys.Commands.CreateApiKey.#ctor(System.String,System.String,System.String)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.ApiKeys.Commands.CreateApiKey" />.
            </summary>
            <param name="applicationName">
                <see cref="P:Coderr.Server.Api.Core.ApiKeys.Commands.CreateApiKey.ApplicationName" />
            </param>
            <param name="apiKey">
                <see cref="P:Coderr.Server.Api.Core.ApiKeys.Commands.CreateApiKey.ApiKey" />
            </param>
            <param name="sharedSecret">
                <see cref="P:Coderr.Server.Api.Core.ApiKeys.Commands.CreateApiKey.SharedSecret" />
            </param>
        </member>
        <member name="M:Coderr.Server.Api.Core.ApiKeys.Commands.CreateApiKey.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.ApiKeys.Commands.CreateApiKey.AccountId">
            <summary>
                Must always be the one that creates the key (will be assigned by the CommandBus per convention)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.ApiKeys.Commands.CreateApiKey.ApiKey">
            <summary>
                Generated API key
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.ApiKeys.Commands.CreateApiKey.ApplicationIds">
            <summary>
                applications that this key may modify. Empty = allow for all applications.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.ApiKeys.Commands.CreateApiKey.ApplicationName">
            <summary>
                Application that uses this API key
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.ApiKeys.Commands.CreateApiKey.SharedSecret">
            <summary>
                Used to sign all requests.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.ApiKeys.Commands.DeleteApiKey">
            <summary>
                Delete an API key.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.ApiKeys.Commands.DeleteApiKey.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.ApiKeys.Commands.DeleteApiKey.#ctor(System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.ApiKeys.Commands.DeleteApiKey" />.
            </summary>
            <param name="id">PK</param>
        </member>
        <member name="M:Coderr.Server.Api.Core.ApiKeys.Commands.DeleteApiKey.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.ApiKeys.Commands.DeleteApiKey" />.
            </summary>
            <param name="apiKey">The generated ApiKey</param>
        </member>
        <member name="P:Coderr.Server.Api.Core.ApiKeys.Commands.DeleteApiKey.ApiKey">
            <summary>
                generated api key (if specified)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.ApiKeys.Commands.DeleteApiKey.Id">
            <summary>
                PK (if specified)
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.ApiKeys.Commands.EditApiKey">
            <summary>
                Create a new api key
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.ApiKeys.Commands.EditApiKey.#ctor(System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.ApiKeys.Commands.EditApiKey" />.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.ApiKeys.Commands.EditApiKey.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.ApiKeys.Commands.EditApiKey.ApplicationIds">
            <summary>
                applications that this key may modify. Empty = allow for all applications.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.ApiKeys.Commands.EditApiKey.ApplicationName">
            <summary>
                Application that uses this api key
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.ApiKeys.Commands.EditApiKey.Id">
            <summary>
                Key id
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.ApiKeys.Events.ApiKeyCreated">
            <summary>
            A new API key has been created.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.ApiKeys.Events.ApiKeyCreated.#ctor(System.String,System.String,System.String,System.Int32[],System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.ApiKeys.Events.ApiKeyCreated" />.
            </summary>
            <param name="applicationNameForTheAppUsingTheKey">Name of the application that integrates with OTE</param>
            <param name="apiKey">Actual key</param>
            <param name="sharedSecret">Used to authenticate the key</param>
            <param name="applicationIds">Applications that the key is allowed to access</param>
            <param name="createdById">User that created this key</param>
        </member>
        <member name="M:Coderr.Server.Api.Core.ApiKeys.Events.ApiKeyCreated.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.ApiKeys.Events.ApiKeyCreated.ApiKey">
            <summary>
                Actual api key
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.ApiKeys.Events.ApiKeyCreated.ApplicationIds">
            <summary>
                Applications that the key is allowed to access
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.ApiKeys.Events.ApiKeyCreated.ApplicationNameForTheAppUsingTheKey">
            <summary>
                Name of the application that integrates with OTE.
            </summary>
            <remarks>
                <para>
                    To allow the user to know which key is used for which integration.
                </para>
            </remarks>
        </member>
        <member name="P:Coderr.Server.Api.Core.ApiKeys.Events.ApiKeyCreated.CreatedById">
            <summary>
                Account id of the user that created the key.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.ApiKeys.Events.ApiKeyCreated.SharedSecret">
            <summary>
                Shared secret used to authenticate requests
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.ApiKeys.Events.ApiKeyRemoved">
            <summary>
            A API key was removed from the system
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.ApiKeys.Queries.GetApiKey">
            <summary>
                Get information about an API key
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.ApiKeys.Queries.GetApiKey.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.ApiKeys.Queries.GetApiKey.#ctor(System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.ApiKeys.Queries.GetApiKey" />.
            </summary>
            <param name="id">PK</param>
        </member>
        <member name="M:Coderr.Server.Api.Core.ApiKeys.Queries.GetApiKey.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.ApiKeys.Queries.GetApiKey" />.
            </summary>
            <param name="apiKey">The generated ApiKey</param>
        </member>
        <member name="P:Coderr.Server.Api.Core.ApiKeys.Queries.GetApiKey.ApiKey">
            <summary>
                generated api key (if specified)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.ApiKeys.Queries.GetApiKey.Id">
            <summary>
                PK (if specified)
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.ApiKeys.Queries.GetApiKeyResult">
            <summary>
                Result for <see cref="T:Coderr.Server.Api.Core.ApiKeys.Queries.GetApiKey" />.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.ApiKeys.Queries.GetApiKeyResult.AllowedApplications">
            <summary>
                Application ids that we've been granted to work with
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.ApiKeys.Queries.GetApiKeyResult.ApplicationName">
            <summary>
                Application that will be using this key
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.ApiKeys.Queries.GetApiKeyResult.CreatedAtUtc">
            <summary>
                When this key was generated
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.ApiKeys.Queries.GetApiKeyResult.CreatedById">
            <summary>
                AccountId that generated this key
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.ApiKeys.Queries.GetApiKeyResult.GeneratedKey">
            <summary>
                Api key
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.ApiKeys.Queries.GetApiKeyResult.Id">
            <summary>
                PK
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.ApiKeys.Queries.GetApiKeyResult.SharedSecret">
            <summary>
                Used when generating signatures.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.ApiKeys.Queries.GetApiKeyResultApplication">
            <summary>
                An allowed application for <see cref="T:Coderr.Server.Api.Core.ApiKeys.Queries.GetApiKeyResult" />.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.ApiKeys.Queries.GetApiKeyResultApplication.ApplicationId">
            <summary>
                Application id (PK)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.ApiKeys.Queries.GetApiKeyResultApplication.ApplicationName">
            <summary>
                Name of the application
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.ApiKeys.Queries.ListApiKeys">
            <summary>
                List all created keys
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.ApiKeys.Queries.ListApiKeysResult">
            <summary>
                Result for <see cref="T:Coderr.Server.Api.Core.ApiKeys.Queries.ListApiKeys" />.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.ApiKeys.Queries.ListApiKeysResult.Keys">
            <summary>
                All created keys
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.ApiKeys.Queries.ListApiKeysResultItem">
            <summary>
                Item for <see cref="T:Coderr.Server.Api.Core.ApiKeys.Queries.ListApiKeysResult" />.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.ApiKeys.Queries.ListApiKeysResultItem.ApiKey">
            <summary>
                Key to use
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.ApiKeys.Queries.ListApiKeysResultItem.ApplicationName">
            <summary>
                Application name, i.e. name of the application that uses this key.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.ApiKeys.Queries.ListApiKeysResultItem.Id">
            <summary>
                Identity
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Applications.ApplicationListItem">
            <summary>
                Result item for <see cref="T:Coderr.Server.Api.Core.Applications.Queries.GetApplicationList" />
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Applications.ApplicationListItem.#ctor(System.Int32,System.String)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Applications.ApplicationListItem" />.
            </summary>
            <param name="id">application identity</param>
            <param name="name">name of the application</param>
        </member>
        <member name="M:Coderr.Server.Api.Core.Applications.ApplicationListItem.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.ApplicationListItem.Id">
            <summary>
                Id of the application (primary key)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.ApplicationListItem.Name">
            <summary>
                Application name as entered by the user.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.ApplicationListItem.IsAdmin">
            <summary>
            User that requested this list is the admin of the specified application.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Applications.Commands.CreateApplication">
            <summary>
                Create a new application.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Applications.Commands.CreateApplication.#ctor(System.String,Coderr.Server.Api.Core.Applications.TypeOfApplication)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Applications.Commands.CreateApplication" />.
            </summary>
            <param name="name">Name of the application (as entered by the user)</param>
            <param name="typeOfApplication">Application type</param>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Commands.CreateApplication.ApplicationKey">
            <summary>
                Generated application key
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Commands.CreateApplication.Name">
            <summary>
                User specified name
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Commands.CreateApplication.TypeOfApplication">
            <summary>
                Application type
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Commands.CreateApplication.UserId">
            <summary>
                Account id for the user that sent the command
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Applications.Commands.DeleteApplication">
            <summary>
                Delete an existing application including of all its data.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Applications.Commands.DeleteApplication.#ctor(System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Applications.Commands.DeleteApplication" />.
            </summary>
            <param name="id">application id</param>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Commands.DeleteApplication.Id">
            <summary>
                Gets id of the application to delete.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Applications.Commands.RemoveTeamMember">
            <summary>
                Remove a team member from the
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Applications.Commands.RemoveTeamMember.#ctor(System.Int32,System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Applications.Commands.RemoveTeamMember" />.
            </summary>
            <param name="applicationId">Application to remove user from</param>
            <param name="userToRemove">User id</param>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Commands.RemoveTeamMember.ApplicationId">
            <summary>
                application to remove user from
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Commands.RemoveTeamMember.UserToRemove">
            <summary>
                User id
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Applications.Commands.UpdateApplication">
            <summary>
                Update application
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Applications.Commands.UpdateApplication.#ctor(System.Int32,System.String)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Applications.Commands.UpdateApplication" />.
            </summary>
            <param name="applicationId">Application to update</param>
            <param name="name">New application name</param>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Commands.UpdateApplication.ApplicationId">
            <summary>
                Application to change
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Commands.UpdateApplication.Name">
            <summary>
                New application name
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Commands.UpdateApplication.TypeOfApplication">
            <summary>
                Update type of application
            </summary>
            <remarks>
                <para>
                    Used when analyzing context data
                </para>
            </remarks>
        </member>
        <member name="T:Coderr.Server.Api.Core.Applications.Events.ApplicationCreated">
            <summary>
                Published when a new application have been created by a user.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Applications.Events.ApplicationCreated.#ctor(System.Int32,System.String,System.Int32,System.String,System.String)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Applications.Events.ApplicationCreated" />.
            </summary>
            <param name="id">application identity</param>
            <param name="name">name as specified by the user</param>
            <param name="createdById">account id for the user that created the application</param>
            <param name="appKey">appKey used to identify the application during uploads.</param>
            <param name="sharedSecret">Used with <paramref name="appKey" /> to authenticate the upload.</param>
        </member>
        <member name="M:Coderr.Server.Api.Core.Applications.Events.ApplicationCreated.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Events.ApplicationCreated.AppKey">
            <summary>
                Application key which is used to identify the application that uploads a report.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Events.ApplicationCreated.ApplicationId">
            <summary>
                Application identity
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Events.ApplicationCreated.ApplicationName">
            <summary>
                Name as entered by the user.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Events.ApplicationCreated.CreatedById">
            <summary>
                Account id of the person that created this application
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Events.ApplicationCreated.SharedSecret">
            <summary>
                Used together with the <see cref="P:Coderr.Server.Api.Core.Applications.Events.ApplicationCreated.AppKey" /> to be able to authenticate the upload.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Applications.Events.ApplicationDeleted">
            <summary>
                An application have been deleted.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Events.ApplicationDeleted.AppKey">
            <summary>
                Key used when uploading reports
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Events.ApplicationDeleted.ApplicationId">
            <summary>
                Database PK
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Events.ApplicationDeleted.ApplicationName">
            <summary>
                Name of the application
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Applications.Events.UserAddedToApplication">
            <summary>
                A user have been added directly, or through an invitation
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Applications.Events.UserAddedToApplication.#ctor(System.Int32,System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Applications.Events.UserAddedToApplication" />.
            </summary>
            <param name="applicationId">Identifier for the application that the user was added to.</param>
            <param name="accountId">Account identifier for the user that was added to the application</param>
        </member>
        <member name="M:Coderr.Server.Api.Core.Applications.Events.UserAddedToApplication.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Events.UserAddedToApplication.AccountId">
            <summary>
                Account identifier for the user that was added to the application
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Events.UserAddedToApplication.ApplicationId">
            <summary>
                Identifier for the application that the user was added to.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Applications.Events.UserInvitedToApplication">
            <summary>
                Event published when the <see cref="T:Coderr.Server.Api.Core.Invitations.Commands.InviteUser" /> command is done.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Applications.Events.UserInvitedToApplication.#ctor(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Applications.Events.UserInvitedToApplication" />.
            </summary>
            <param name="invitationKey">Key that the user clicks on in the invitation email</param>
            <param name="applicationId">Application that the user was invited to</param>
            <param name="applicationName">application name</param>
            <param name="emailAddress">Email address that the invitation was sent to</param>
            <param name="invitedBy">Username for the user that made the invitation</param>
            <exception cref="T:System.ArgumentNullException">emailAddress; invitedBy</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">applicationId</exception>
        </member>
        <member name="M:Coderr.Server.Api.Core.Applications.Events.UserInvitedToApplication.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Events.UserInvitedToApplication.ApplicationId">
            <summary>
                Application that the user will gain access to.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Events.UserInvitedToApplication.ApplicationName">
            <summary>
                Application name
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Events.UserInvitedToApplication.EmailAddress">
            <summary>
                Email address to the invited user.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Events.UserInvitedToApplication.InvitationKey">
            <summary>
                Identifier sent in the invitation email.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Events.UserInvitedToApplication.InvitedBy">
            <summary>
                Username of the user that invited the other user.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Applications.NamespaceDoc">
            <summary>
                An application that we can receive exceptions for.
            </summary>
            <remarks>
                <para>
                    It can also be a specific tier in an application. For instance ASP.NET WebApi, or client side (like an Mobile
                    application).
                </para>
            </remarks>
        </member>
        <member name="T:Coderr.Server.Api.Core.Applications.Queries.GetApplicationIdByKey">
            <summary>
                Get an application by using the AppKey.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Applications.Queries.GetApplicationIdByKey.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Applications.Queries.GetApplicationIdByKey" />.
            </summary>
            <param name="applicationKey">appKey (GUID)</param>
        </member>
        <member name="M:Coderr.Server.Api.Core.Applications.Queries.GetApplicationIdByKey.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Queries.GetApplicationIdByKey.ApplicationKey">
            <summary>
                AppKey
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Applications.Queries.GetApplicationIdByKeyResult">
            <summary>
                Result for <see cref="T:Coderr.Server.Api.Core.Applications.Queries.GetApplicationIdByKey" />.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Queries.GetApplicationIdByKeyResult.Id">
            <summary>
                Application id
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Applications.Queries.GetApplicationInfo">
            <summary>
                Get information for an application either by using the key or application id
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Applications.Queries.GetApplicationInfo.#ctor(System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Applications.Queries.GetApplicationInfo" />.
            </summary>
            <param name="id">identity of the application</param>
        </member>
        <member name="M:Coderr.Server.Api.Core.Applications.Queries.GetApplicationInfo.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Applications.Queries.GetApplicationInfo" />.
            </summary>
            <param name="appKey">Application key used when sending error reports</param>
        </member>
        <member name="M:Coderr.Server.Api.Core.Applications.Queries.GetApplicationInfo.#ctor">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Applications.Queries.GetApplicationInfo" />.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Queries.GetApplicationInfo.AppKey">
            <summary>
                Application key from the user interface
            </summary>
            <exception cref="T:System.FormatException">Not a valid application key.</exception>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Queries.GetApplicationInfo.ApplicationId">
            <summary>
                Application id
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Not a valid application id</exception>
        </member>
        <member name="T:Coderr.Server.Api.Core.Applications.Queries.GetApplicationInfoResult">
            <summary>
                Result for <see cref="T:Coderr.Server.Api.Core.Applications.Queries.GetApplicationInfo" />.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Queries.GetApplicationInfoResult.AppKey">
            <summary>
                Application key
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Queries.GetApplicationInfoResult.ApplicationType">
            <summary>
                Type of application
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Queries.GetApplicationInfoResult.Id">
            <summary>
                Application id
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Queries.GetApplicationInfoResult.Name">
            <summary>
                Name of the application.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Queries.GetApplicationInfoResult.SharedSecret">
            <summary>
                Shared secret, used together with <see cref="P:Coderr.Server.Api.Core.Applications.Queries.GetApplicationInfoResult.AppKey" /> to make sure that the reports come from the correct source.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Queries.GetApplicationInfoResult.TotalIncidentCount">
            <summary>
                Total number of incidents for this application.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Queries.GetApplicationInfoResult.Versions">
            <summary>
            Versions that we have received error reports for.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Applications.Queries.GetApplicationList">
            <summary>
                Get a list of applications.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Queries.GetApplicationList.AccountId">
            <summary>
                Get all applications that the given user have access to
            </summary>
            <remarks>
                <para>
                    0 = get all applications
                </para>
            </remarks>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Queries.GetApplicationList.FilterAsAdmin">
            <summary>
                Only list applications that the given account is administrator for.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Applications.Queries.GetApplicationOverview">
            <summary>
                Get stats etc that can be presented as an overview for an application.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Applications.Queries.GetApplicationOverview.#ctor(System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Applications.Queries.GetApplicationOverview" />.
            </summary>
            <param name="applicationId"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">applicationId</exception>
        </member>
        <member name="M:Coderr.Server.Api.Core.Applications.Queries.GetApplicationOverview.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Queries.GetApplicationOverview.ApplicationId">
            <summary>
                Application id to get an overview for.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Queries.GetApplicationOverview.NumberOfDays">
            <summary>
                Amount of time to look back (i.e. startdate = DateTime.Now.Substract(WindowSize))
            </summary>
            <remarks>
                1 = switch to hours
            </remarks>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Queries.GetApplicationOverview.Version">
            <summary>
            Filter on a specific version ("1.1.0")
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Applications.Queries.GetApplicationOverviewResult">
            <summary>
                Result for <see cref="T:Coderr.Server.Api.Core.Applications.Queries.GetApplicationOverview" />.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Queries.GetApplicationOverviewResult.Days">
            <summary>
                1 = switch to hours for incidents and reports.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Queries.GetApplicationOverviewResult.ErrorReports">
            <summary>
                One entry for each day
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Queries.GetApplicationOverviewResult.Incidents">
            <summary>
                One incident count for each day
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Queries.GetApplicationOverviewResult.StatSummary">
            <summary>
                Statistics summary
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Queries.GetApplicationOverviewResult.TimeAxisLabels">
            <summary>
                Labels for X axis
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Applications.Queries.GetApplicationTeam">
            <summary>
                Get all members of a specific application
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Applications.Queries.GetApplicationTeam.#ctor(System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Applications.Queries.GetApplicationTeam" />.
            </summary>
            <param name="applicationId">application id</param>
            <exception cref="T:System.ArgumentOutOfRangeException">applicationId</exception>
        </member>
        <member name="M:Coderr.Server.Api.Core.Applications.Queries.GetApplicationTeam.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Queries.GetApplicationTeam.ApplicationId">
            <summary>
                Application id
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Applications.Queries.GetApplicationTeamMember">
            <summary>
                Item for <see cref="T:Coderr.Server.Api.Core.Applications.Queries.GetApplicationTeamResult" />.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Queries.GetApplicationTeamMember.JoinedAtUtc">
            <summary>
                When this person was added to the application (or rather when he accepted the invitation)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Queries.GetApplicationTeamMember.UserId">
            <summary>
                Account id
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Queries.GetApplicationTeamMember.UserName">
            <summary>
                Account name
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Applications.Queries.GetApplicationTeamResult">
            <summary>
                Result for <see cref="T:Coderr.Server.Api.Core.Applications.Queries.GetApplicationTeam" />.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Queries.GetApplicationTeamResult.Invited">
            <summary>
                Invited which have not yet accepted the invitation.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Queries.GetApplicationTeamResult.Members">
            <summary>
                Members
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Applications.Queries.GetApplicationTeamResultInvitation">
            <summary>
                Item for <see cref="T:Coderr.Server.Api.Core.Applications.Queries.GetApplicationTeamResult" />.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Queries.GetApplicationTeamResultInvitation.EmailAddress">
            <summary>
                Address that the invitation was sent to.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Queries.GetApplicationTeamResultInvitation.InvitedAtUtc">
            <summary>
                When the invitation was sent.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Queries.GetApplicationTeamResultInvitation.InvitedByUserName">
            <summary>
                User that sent the invitation.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Applications.Queries.OverviewStatSummary">
            <summary>
                Stats for the last seven days
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Queries.OverviewStatSummary.Followers">
            <summary>
                Number of followers
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Queries.OverviewStatSummary.Incidents">
            <summary>
                Number of incidents
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Queries.OverviewStatSummary.Reports">
            <summary>
                Number of reports received
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Applications.Queries.OverviewStatSummary.UserFeedback">
            <summary>
                Number user feedback items
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Applications.TypeOfApplication">
            <summary>
                Kind of application that this is
            </summary>
            <remarks>
                <para>
                    Used to determine how different analytics should be made, like analyzing memory usage (which has to guess the
                    total amount of memory if not included as context information).
                </para>
                <para>
                    For instance a <c>OutOfMemoryException</c> isn't as fatal in a mobile application, like it is in a large server
                    application, as the latter is supposed to have large amount of resources.
                </para>
            </remarks>
        </member>
        <member name="F:Coderr.Server.Api.Core.Applications.TypeOfApplication.Mobile">
            <summary>
                Cellphone application
            </summary>
            <remarks>
                <para>
                    An application with limited system resources (memory and usage).
                </para>
            </remarks>
        </member>
        <member name="F:Coderr.Server.Api.Core.Applications.TypeOfApplication.DesktopApplication">
            <summary>
                DesktopApplication application (i.e. a windows end user computer)
            </summary>
        </member>
        <member name="F:Coderr.Server.Api.Core.Applications.TypeOfApplication.Server">
            <summary>
                Server, as a web server or a WCF service.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Feedback.Commands.SubmitFeedback">
            <summary>
                A user that experienced an error have either followed the link to our website to submit an error or have entered it
                directly into our client library integration.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Feedback.Commands.SubmitFeedback.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Coderr.Server.Api.Core.Feedback.Commands.SubmitFeedback" /> class.
            </summary>
            <param name="errorId">Client side id.</param>
            <param name="remoteAddress">The remote address.</param>
            <exception cref="T:System.ArgumentNullException">
                errorId
                or
                remoteAddress
            </exception>
        </member>
        <member name="M:Coderr.Server.Api.Core.Feedback.Commands.SubmitFeedback.#ctor(System.Int32,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Coderr.Server.Api.Core.Feedback.Commands.SubmitFeedback" /> class.
            </summary>
            <param name="reportId">Error report identity.</param>
            <param name="remoteAddress">The remote address.</param>
            <exception cref="T:System.ArgumentNullException">
                remoteAddress
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">reportId</exception>
        </member>
        <member name="M:Coderr.Server.Api.Core.Feedback.Commands.SubmitFeedback.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Feedback.Commands.SubmitFeedback.CreatedAtUtc">
            <summary>
                When the feedback was created in the client library
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Feedback.Commands.SubmitFeedback.Email">
            <summary>
                Email address (user want to get status updates)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Feedback.Commands.SubmitFeedback.ErrorId">
            <summary>
                Error id generated in our client library. Used to identify error reports before they have been saved into our
                system
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Feedback.Commands.SubmitFeedback.Feedback">
            <summary>
                Error description
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Feedback.Commands.SubmitFeedback.RemoteAddress">
            <summary>
                IP that the user connected from. either taken from the error report or from the HTTP POST if the UI less client
                library directed the user to our web site.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Feedback.Commands.SubmitFeedback.ReportId">
            <summary>
                PK from the db entry of the error report.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Feedback.Commands.SubmitFeedback.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
                Validate contents of this command
            </summary>
            <param name="validationContext">validation context</param>
            <returns>Validation errors if any</returns>
        </member>
        <member name="T:Coderr.Server.Api.Core.Feedback.NamespaceDoc">
            <summary>
                Feedback / error description written by the user when the exception was caught.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:Coderr.Server.Api.Core.Incidents.Commands.AssignIncident">
            <summary>
                Start working on an incident.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Incidents.Commands.AssignIncident.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
                Creates new instance of <see cref="T:Coderr.Server.Api.Core.Incidents.Commands.AssignIncident" />.
            </summary>
            <param name="incidentId">Incident being assigned</param>
            <param name="assignedTo">Id of the user that got assigned to this incident</param>
            <param name="assignedBy">Id of the user that assigned this incident, 0 for system requests</param>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Commands.AssignIncident.AssignedBy">
            <summary>
                Id of the user that assigned this incident.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Commands.AssignIncident.AssignedTo">
            <summary>
                Id of the user that got assigned to this incident.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Commands.AssignIncident.IncidentId">
            <summary>
                Incident being assigned.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Incidents.Commands.CloseIncident">
            <summary>
                Close incident (i.e. we have corrected the issue)
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Incidents.Commands.CloseIncident.#ctor(System.String,System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Incidents.Commands.CloseIncident" />.
            </summary>
            <param name="solution">Markdown formatted string detailing how we solved this incident.</param>
            <param name="incidentId">Incident that was solved.</param>
        </member>
        <member name="M:Coderr.Server.Api.Core.Incidents.Commands.CloseIncident.#ctor">
            <summary>
                Serialization constructor.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Commands.CloseIncident.ApplicationVersion">
            <summary>
                Which version that incident is solved in (like "1.2.1").
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Commands.CloseIncident.CanSendNotification">
            <summary>
                Can send notifications to everyone which has reported exceptions through our system.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Commands.CloseIncident.IncidentId">
            <summary>
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Commands.CloseIncident.NotificationText">
            <summary>
                Text to send as email body
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Commands.CloseIncident.NotificationTitle">
            <summary>
                Title of outbound notification.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Commands.CloseIncident.ShareSolution">
            <summary>
                If this solution can be shared with other OTE customers.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Commands.CloseIncident.Solution">
            <summary>
                How the incident has been fixed.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Commands.CloseIncident.UserId">
            <summary>
                User that closed the incident
            </summary>
            <remarks>
                <para>Need to be named "UserId" so that the CQS mapper can add the logged in user id</para>
            </remarks>
        </member>
        <member name="T:Coderr.Server.Api.Core.Incidents.Commands.IgnoreIncident">
            <summary>
                Ignore incident
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Incidents.Commands.IgnoreIncident.#ctor(System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Incidents.Commands.IgnoreIncident" />.
            </summary>
            <param name="incidentId">incident id</param>
            <exception cref="T:System.ArgumentOutOfRangeException">incidentId</exception>
        </member>
        <member name="M:Coderr.Server.Api.Core.Incidents.Commands.IgnoreIncident.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Commands.IgnoreIncident.IncidentId">
            <summary>
                Incident to ignore
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Commands.IgnoreIncident.UserId">
            <summary>
                Person that ignored the report.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Incidents.Commands.NotifySubscribers">
            <summary>
            Notify all users that have subscribed on an incident.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Commands.NotifySubscribers.IncidentId">
            <summary>
            Incident id
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Commands.NotifySubscribers.Body">
            <summary>
                Text to send as email body
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Commands.NotifySubscribers.Title">
            <summary>
                Title of outbound notification.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Incidents.Commands.ReOpenIncident">
            <summary>
                An incident which has either been closed or ignored is marked as active again
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Incidents.Commands.ReOpenIncident.#ctor(System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Incidents.Commands.ReOpenIncident" />.
            </summary>
            <param name="incidentId">incident to reopen</param>
        </member>
        <member name="M:Coderr.Server.Api.Core.Incidents.Commands.ReOpenIncident.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Commands.ReOpenIncident.IncidentId">
            <summary>
                Incident to reopen
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Commands.ReOpenIncident.UserId">
            <summary>
                User requesting item to be reopened.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Incidents.Events.IncidentAssigned">
            <summary>
                Someone was assigned to an incident
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Incidents.Events.IncidentAssigned.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Incidents.Events.IncidentAssigned" />.
            </summary>
            <param name="incidentId">Incident being assigned</param>
            <param name="assignedById">User assigning the incident</param>
            <param name="assignedToId">User that should start working with the incident</param>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Events.IncidentAssigned.AssignedById">
            <summary>
                User assigning the incident (delegate work)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Events.IncidentAssigned.AssignedToId">
            <summary>
                User that should start working with the incident
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Events.IncidentAssigned.IncidentId">
            <summary>
                Incident being assigned
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Incidents.Events.IncidentIgnored">
            <summary>
                Our user have configured that all new reports for this incident should be ignored
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Incidents.Events.IncidentIgnored.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Incidents.Events.IncidentIgnored" />.
            </summary>
            <param name="incidentId">incident being ignored</param>
            <param name="accountId">account ignoring the incident</param>
            <param name="userName">userName for the given account</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Coderr.Server.Api.Core.Incidents.Events.IncidentIgnored.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Events.IncidentIgnored.AccountId">
            <summary>
                User that configured ignore.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Events.IncidentIgnored.IncidentId">
            <summary>
                Incident id
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Events.IncidentIgnored.UserName">
            <summary>
                Name of the user.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Incidents.IncidentOrder">
            <summary>
                How incidents should be ordered in a list
            </summary>
        </member>
        <member name="F:Coderr.Server.Api.Core.Incidents.IncidentOrder.Newest">
            <summary>
                Newest incidents first
            </summary>
        </member>
        <member name="F:Coderr.Server.Api.Core.Incidents.IncidentOrder.MostReports">
            <summary>
                The incident with the highest number of reports
            </summary>
        </member>
        <member name="F:Coderr.Server.Api.Core.Incidents.IncidentOrder.MostFeedback">
            <summary>
                The incidents with the most given feedback
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Incidents.IncidentSummaryDTO">
            <summary>
                A small summary of an incident, typically used to list incidents.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Incidents.IncidentSummaryDTO.#ctor(System.Int32,System.String)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Incidents.IncidentSummaryDTO" />.
            </summary>
            <param name="id">incident id</param>
            <param name="name">incident name</param>
            <exception cref="T:System.ArgumentNullException">name</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">incident id</exception>
        </member>
        <member name="M:Coderr.Server.Api.Core.Incidents.IncidentSummaryDTO.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.IncidentSummaryDTO.ApplicationId">
            <summary>
                Application that the incident belongs to
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.IncidentSummaryDTO.ApplicationName">
            <summary>
                Name of that application
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.IncidentSummaryDTO.CreatedAtUtc">
            <summary>
                When the incident was created (when we received the first report).
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.IncidentSummaryDTO.Id">
            <summary>
                Incident id
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.IncidentSummaryDTO.IsReOpened">
            <summary>
                Incident was closed but then received a new error report.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.IncidentSummaryDTO.AssignedToUserId">
            <summary>
            someone is assigned to this incident
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.IncidentSummaryDTO.LastUpdateAtUtc">
            <summary>
                Update is both when the incident was open/closed and when we received a new report. TODO: Should be refactored into
                two fields.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.IncidentSummaryDTO.Name">
            <summary>
                Incident name (typically first line of the exception message)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.IncidentSummaryDTO.ReportCount">
            <summary>
                Number of reports that we've received. Should be the total amount (including those that have been deleted due to
                retention days).
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Incidents.NamespaceDoc">
            <summary>
                All instances of the same exception are grouped together into an incident (i.e. even if the same exception is
                thrown 100 000 it's still the same incident).
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:Coderr.Server.Api.Core.Incidents.Queries.FindIncidents">
            <summary>
                Find incidents
            </summary>
            <remarks>
                <para>
                    Default query is only open incidents with 20 items per page.
                </para>
            </remarks>
        </member>
        <member name="M:Coderr.Server.Api.Core.Incidents.Queries.FindIncidents.#ctor">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Incidents.Queries.FindIncidents" />.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.FindIncidents.AssignedToId">
            <summary>
                Find incidents assigned to the specified user
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.FindIncidents.ApplicationIds">
            <summary>
                Empty = find for all applications
            </summary>
            <value>
                The application identifier.
            </value>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.FindIncidents.ContextCollectionName">
            <summary>
                Find an incident with a specific collection
            </summary>
            <remarks>
                <para>
                    Wildcard search is allowed, i.e. "http*"
                </para>
            </remarks>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.FindIncidents.ContextCollectionPropertyName">
            <summary>
                Find an incident with a specific property
            </summary>
            <remarks>
                <para>
                    Wildcard search is allowed, i.e. "http*"
                </para>
            </remarks>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.FindIncidents.ContextCollectionPropertyValue">
            <summary>
                Find an incident with a specific property value
            </summary>
            <remarks>
                <para>
                    Wildcard search is allowed, i.e. "http*"
                </para>
            </remarks>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.FindIncidents.FreeText">
            <summary>
                Will be searched in incident.message and report.stacktrace.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.FindIncidents.IsAssigned">
            <summary>
                Been assigned to someone
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.FindIncidents.IsClosed">
            <summary>
                Include closed incidents
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.FindIncidents.IsIgnored">
            <summary>
                Include ignored incidents
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.FindIncidents.IsNew">
            <summary>
                Incidents that have not been assigned to someone (or closed/ignored).
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.FindIncidents.ItemsPerPage">
            <summary>
                Number of items per page.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.FindIncidents.MaxDate">
            <summary>
                End of period
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.FindIncidents.MinDate">
            <summary>
                Start of period
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.FindIncidents.PageNumber">
            <summary>
                Page to fetch (one based index)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.FindIncidents.ReOpened">
            <summary>
                Include reopened incidents
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.FindIncidents.SortAscending">
            <summary>
                Sort order
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.FindIncidents.SortType">
            <summary>
                Sort type
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.FindIncidents.Tags">
            <summary>
                Incident should have all the specified tags
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.FindIncidents.Version">
            <summary>
                Version (in the form of a version string i.e. "1.2.1")
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Incidents.Queries.FindIncidentsResult">
            <summary>
                Result for <see cref="T:Coderr.Server.Api.Core.Incidents.Queries.FindIncidentsResult" />.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.FindIncidentsResult.Items">
            <summary>
                Items
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.FindIncidentsResult.PageNumber">
            <summary>
                Page number (one based index)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.FindIncidentsResult.PageSize">
            <summary>
                Items returned for this page
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.FindIncidentsResult.TotalCount">
            <summary>
                Total number of items
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Incidents.Queries.FindIncidentsResultItem">
            <summary>
                Item for <see cref="T:Coderr.Server.Api.Core.Incidents.Queries.FindIncidentsResult" />.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Incidents.Queries.FindIncidentsResultItem.#ctor(System.Int32,System.String)">
            <summary>
                Creates new instance of <see cref="T:Coderr.Server.Api.Core.Incidents.Queries.FindIncidentsResultItem" />.
            </summary>
            <param name="id">incident id</param>
            <param name="name">incident name</param>
        </member>
        <member name="M:Coderr.Server.Api.Core.Incidents.Queries.FindIncidentsResultItem.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.FindIncidentsResultItem.ApplicationId">
            <summary>
                Id of the application that this incident belongs to
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.FindIncidentsResultItem.ApplicationName">
            <summary>
                Name of the application that this incident belongs to
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.FindIncidentsResultItem.CreatedAtUtc">
            <summary>
                When the first report was received.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.FindIncidentsResultItem.Id">
            <summary>
                Incident id
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.FindIncidentsResultItem.IsReOpened">
            <summary>
                Incident have been automatically opened again after being closed by a user.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.FindIncidentsResultItem.LastUpdateAtUtc">
            <summary>
                When someone updated this incident (assigned/closed etc).
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.FindIncidentsResultItem.Name">
            <summary>
                Incident name
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.FindIncidentsResultItem.ReportCount">
            <summary>
                Total number of received reports (increased even if the number of stored reports are at the limit)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.FindIncidentsResultItem.LastReportReceivedAtUtc">
            <summary>
            When we recieved the last report.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Incidents.Queries.GetIncident">
            <summary>
                Get incident query
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Incidents.Queries.GetIncident.#ctor(System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Incidents.Queries.GetIncident" />.
            </summary>
            <param name="incidentId">incident id</param>
            <exception cref="T:System.ArgumentOutOfRangeException">incidentId</exception>
        </member>
        <member name="M:Coderr.Server.Api.Core.Incidents.Queries.GetIncident.#ctor">
            <summary>
                Serialization constructor.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncident.IncidentId">
            <summary>
                Incident id
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentForClosePage">
            <summary>
                Get incident information tailored for the close page.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentForClosePage.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentForClosePage.#ctor(System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentForClosePage" />.
            </summary>
            <param name="incidentId">incident id</param>
            <exception cref="T:System.ArgumentOutOfRangeException">incidentId</exception>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentForClosePage.IncidentId">
            <summary>
                Incident id
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentForClosePageResult">
            <summary>
                Result for <see cref="T:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentForClosePage" />.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentForClosePageResult.Description">
            <summary>
                A summary of the incident
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentForClosePageResult.SubscriberCount">
            <summary>
                Number of update subscribers (i.e. users that want status updates).
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentResult">
            <summary>
                Keeps track of all occurrences of a single incident (i.e. error reports which generates the same hash code)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentResult.ApplicationId">
            <summary>
                Application that the incident belongs to
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentResult.AssignedAtUtc">
            <summary>
                When it was assigned to the person.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentResult.AssignedTo">
            <summary>
                User name of the person that this incident is assigned to.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentResult.AssignedToId">
            <summary>
                User assigned to the incident.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentResult.ContextCollections">
            <summary>
                Context collection names.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentResult.CreatedAtUtc">
            <summary>
                When the incident was created (when we received the first exception).
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentResult.DayStatistics">
            <summary>
                Daily statistics.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentResult.Description">
            <summary>
                Error description (exception message)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentResult.Facts">
            <summary>
                facts
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentResult.FullName">
            <summary>
                Full name of the exception message.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentResult.HashCodeIdentifier">
            <summary>
                Used to identify this incident when the hash code is the same as for other incidents.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentResult.Id">
            <summary>
                primary key
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentResult.IncidentState">
            <summary>
                Stores the state temporary to be able to assigned the bool fields
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentResult.IsIgnored">
            <summary>
                Ignore future reports for this incident (i.e. no notifications, do not store new reports etc).
            </summary>
            <remarks>
                <para>
                    Report counter will still be updated.
                </para>
            </remarks>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentResult.IsReOpened">
            <summary>
                If the incident was closed and then received error reports again.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentResult.IsSolutionShared">
            <summary>
                Share solution with the Coderr community.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentResult.IsSolved">
            <summary>
                Incident has been marked as solved (i.e. closed)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentResult.LastReportReceivedAtUtc">
            <summary>
                When we received the last report for this incident.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentResult.PreviousSolutionAtUtc">
            <summary>
                Solution written last time (if <see cref="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentResult.IsReOpened" /> is <c>true</c>).
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentResult.ReOpenedAtUtc">
            <summary>
                Date if <see cref="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentResult.IsReOpened" /> is <c>true</c>.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentResult.ReportCount">
            <summary>
                Number of reports received to date.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentResult.ReportHashCode">
            <summary>
                Generated hash code
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentResult.Solution">
            <summary>
                How the incident was solved (the last time)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentResult.SolvedAtUtc">
            <summary>
                When the incident was closed/solved.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentResult.StackTrace">
            <summary>
                Stack trace.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentResult.Tags">
            <summary>
                Identified StackOverflow tags.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentResult.UpdatedAtUtc">
            <summary>
                When the incident was updated (either a new report or changes to the actual incident)
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentStatistics">
            <summary>
                Get statistics (i.e. history for a certain period of time)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentStatistics.IncidentId">
            <summary>
                Incident to get stats for.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentStatistics.NumberOfDays">
            <summary>
                Amount of time to look back (i.e. start date = DateTime.Now.Substract(WindowSize))
            </summary>
            <remarks>
                1 = switch to hours
            </remarks>
        </member>
        <member name="T:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentStatisticsResult">
            <summary>
                Result for <see cref="T:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentStatistics" />.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentStatisticsResult.Labels">
            <summary>
                Labels (dates)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.GetIncidentStatisticsResult.Values">
            <summary>
                Incident counts per date
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Incidents.Queries.HighlightedContextData">
            <summary>
                Context data that can help the developer to directly understand why the exception happened.
            </summary>
            <remarks>
                <para>
                    For instance for Page Not Found this is the URL and the Referrer.
                </para>
            </remarks>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.HighlightedContextData.Description">
            <summary>
                Why this data helps and what it means.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.HighlightedContextData.Name">
            <summary>
                Name ("UrlReferrer", "Url", "HttpCode" etc).
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.HighlightedContextData.Url">
            <summary>
                Optional url that the user can click on to get more information
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.HighlightedContextData.Value">
            <summary>
                Value to show
            </summary>
            <remarks>
                Values should be sorted i priority order (first item will be displayed directly)
            </remarks>
        </member>
        <member name="T:Coderr.Server.Api.Core.Incidents.Queries.QuickFact">
            <summary>
                Quick fact for incidents.
            </summary>
            <remarks>
                <para>
                    For instance number of reports, when the incident was created, number of affected users etc.
                </para>
            </remarks>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.QuickFact.Description">
            <summary>
                what this fact displays
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.QuickFact.Title">
            <summary>
                Fact title (heading)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.QuickFact.Url">
            <summary>
                Optional url to get more information.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.QuickFact.Value">
            <summary>
                Value to show
            </summary>
            <remarks>
                For multiple values; separate them with semi colons.
            </remarks>
        </member>
        <member name="T:Coderr.Server.Api.Core.Incidents.Queries.ReportDay">
            <summary>
                A day in our statistics
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.ReportDay.Count">
            <summary>
                Number of items this day
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.ReportDay.Date">
            <summary>
                Date
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Incidents.Queries.SuggestedIncidentSolution">
            <summary>
                A suggested solution for the incident
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.SuggestedIncidentSolution.Reason">
            <summary>
                Common reasons to why this exception is thrown.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Incidents.Queries.SuggestedIncidentSolution.SuggestedSolution">
            <summary>
                How the incident can be solved.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Invitations.Commands.InviteUser">
            <summary>
                Invite a user to participate in an application.
            </summary>
            <remarks>
                <para>
                    Will send an invitation email to the user if the email is not for a registered user, otherwise we'll just
                    add the user as a member of the specified application.
                </para>
            </remarks>
        </member>
        <member name="M:Coderr.Server.Api.Core.Invitations.Commands.InviteUser.#ctor(System.Int32,System.String)">
            <summary>
                Create a new instance of <see cref="T:Coderr.Server.Api.Core.Invitations.Commands.InviteUser" />.
            </summary>
            <param name="applicationId">Application to gain access to</param>
            <param name="emailAddress">Email for the given user.</param>
        </member>
        <member name="M:Coderr.Server.Api.Core.Invitations.Commands.InviteUser.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Invitations.Commands.InviteUser.ApplicationId">
            <summary>
                Application that the user will get access to.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Invitations.Commands.InviteUser.EmailAddress">
            <summary>
                Email to invited user.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Invitations.Commands.InviteUser.Text">
            <summary>
                A text written by the user to describe why the invite was sent.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Invitations.Commands.InviteUser.UserId">
            <summary>
                User that invited
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Invitations.NamespaceDoc">
            <summary>
                Invitations are sent on application basis.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:Coderr.Server.Api.Core.Invitations.Queries.GetInvitationByKey">
            <summary>
                Get invitation by using the emailed invitation key
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Invitations.Queries.GetInvitationByKey.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Invitations.Queries.GetInvitationByKey" />.
            </summary>
            <param name="invitationKey">Emailed key</param>
            <exception cref="T:System.ArgumentNullException">invitationKey</exception>
        </member>
        <member name="M:Coderr.Server.Api.Core.Invitations.Queries.GetInvitationByKey.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Invitations.Queries.GetInvitationByKey.InvitationKey">
            <summary>
                Invitation key
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Invitations.Queries.GetInvitationByKeyResult">
            <summary>
                Result for <see cref="T:Coderr.Server.Api.Core.Invitations.Queries.GetInvitationByKey" />.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Invitations.Queries.GetInvitationByKeyResult.EmailAddress">
            <summary>
                Email address specified when sending the invitation.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Messaging.Commands.NamespaceDoc">
            <summary>
            User related information (such as name, notifcation settings etc.)
            </summary>
            <remarks>
            <para>While accounts are for login authentication and authorization, users are for information about the individual.</para>
            
            </remarks>
        </member>
        <member name="T:Coderr.Server.Api.Core.Messaging.Commands.SendEmail">
            <summary>
                Send an email.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Messaging.Commands.SendEmail.#ctor(Coderr.Server.Api.Core.Messaging.EmailMessage)">
            <summary>
                Create a new instance of <see cref="T:Coderr.Server.Api.Core.Messaging.Commands.SendEmail" />.
            </summary>
            <param name="message">Message to send</param>
        </member>
        <member name="M:Coderr.Server.Api.Core.Messaging.Commands.SendEmail.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Messaging.Commands.SendEmail.EmailMessage">
            <summary>
                Message to send
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Messaging.Commands.SendSms">
            <summary>
                Send a cell phone text.
            </summary>
            <remarks>
                <para>
                    Requires a prepaid account at http://coderrapp.com/services/sms. Add your SMS Api key and the shared
                    secret in your web.config.
                </para>
                <example>
                    <![CDATA[
            <add key="Sms.ApiKey" value="SomeGuid" />
            <add key="Sms.SharedSecret" value="AnotherGuid" />
            ]]>
                </example>
            </remarks>
        </member>
        <member name="M:Coderr.Server.Api.Core.Messaging.Commands.SendSms.#ctor(System.String,System.String)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Messaging.Commands.SendSms" />.
            </summary>
            <param name="phoneNumber">
                E.164 formatted number (<![CDATA[+<countryCode><areaCode><number>]]>, example: <c>+467012345</c>
            </param>
            <param name="message">Message. 160 chars is max for one SMS.</param>
            <exception cref="T:System.ArgumentNullException">phoneNumber; message</exception>
        </member>
        <member name="P:Coderr.Server.Api.Core.Messaging.Commands.SendSms.Message">
            <summary>
                Message. 160 chars is max for one SMS.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Messaging.Commands.SendSms.PhoneNumber">
            <summary>
                E.164 formatted number (<![CDATA[+<countryCode><areaCode><number>]]>, example: <c>+467012345</c>
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Messaging.Commands.SendTemplateEmail">
            <summary>
                Send email using a template.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Messaging.Commands.SendTemplateEmail.#ctor(System.String,System.String)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Messaging.Commands.SendTemplateEmail" />.
            </summary>
            <param name="mailTitle">Mail title (i.e. not the subject)</param>
            <param name="templateName">
                Template to load (should be a sub folder to the invoking class, look at
                <c>RequestPasswordResetHandler</c> for an example.
            </param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Coderr.Server.Api.Core.Messaging.Commands.SendTemplateEmail.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Messaging.Commands.SendTemplateEmail.MailTitle">
            <summary>
                Mail title (in the layout template)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Messaging.Commands.SendTemplateEmail.Model">
            <summary>
                View model
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Messaging.Commands.SendTemplateEmail.Resources">
            <summary>
                Resources to use in the template
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Messaging.Commands.SendTemplateEmail.Subject">
            <summary>
                Mail subject.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Messaging.Commands.SendTemplateEmail.TemplateName">
            <summary>
                Name of the template to parse
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Messaging.Commands.SendTemplateEmail.To">
            <summary>
                Whom to send to (TODO: is accountId OK?)
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Messaging.EmailAddress">
            <summary>
                Email address
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Messaging.EmailAddress.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Messaging.EmailAddress" />.
            </summary>
            <param name="address">email address or account id</param>
        </member>
        <member name="M:Coderr.Server.Api.Core.Messaging.EmailAddress.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Messaging.EmailAddress.Address">
            <summary>
                Email address or AccountId.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Messaging.EmailAddress.Name">
            <summary>
                Recipient name
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Messaging.EmailMessage">
            <summary>
                Used to send emails.
            </summary>
            <remarks>
                <para>
                    Used instead of the .NET classes to allow third party email services.
                </para>
            </remarks>
        </member>
        <member name="M:Coderr.Server.Api.Core.Messaging.EmailMessage.#ctor">
            <summary>
                Create a new instance of <see cref="T:Coderr.Server.Api.Core.Messaging.EmailMessage" />
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Messaging.EmailMessage.#ctor(System.String)">
            <summary>
                Create a new instance of <see cref="T:Coderr.Server.Api.Core.Messaging.EmailMessage" />
            </summary>
            <param name="recipient">Destination</param>
        </member>
        <member name="M:Coderr.Server.Api.Core.Messaging.EmailMessage.#ctor(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
                Create a new instance of <see cref="T:Coderr.Server.Api.Core.Messaging.EmailMessage" />
            </summary>
            <param name="recipients">List of recipients</param>
        </member>
        <member name="P:Coderr.Server.Api.Core.Messaging.EmailMessage.HtmlBody">
            <summary>
                Body (should be send as HTML)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Messaging.EmailMessage.Recipients">
            <summary>
                List of recipients
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Messaging.EmailMessage.ReplyTo">
            <summary>
            Whom should replies be sent to.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Messaging.EmailMessage.Resources">
            <summary>
                Attachments and/or inline images.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Messaging.EmailMessage.Subject">
            <summary>
                Subject line
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Messaging.EmailMessage.TextBody">
            <summary>
                Text body
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Messaging.EmailResource">
            <summary>
                A resource attached to an email (typically an image)
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Messaging.EmailResource.#ctor(System.String,System.Byte[])">
            <summary>
                Name of the resource (refered to using a <c>cid</c> in the email body)
            </summary>
            <param name="name">CID</param>
            <param name="content">Actual content</param>
        </member>
        <member name="M:Coderr.Server.Api.Core.Messaging.EmailResource.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Messaging.EmailResource.Content">
            <summary>
                Contents of the resource. Stream must be readable.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Messaging.EmailResource.Name">
            <summary>
                CID
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Messaging.NamespaceDoc">
            <summary>
                Messaging, which includes sending emails.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:Coderr.Server.Api.Core.NamespaceDoc">
            <summary>
                Core
            </summary>
            <remarks>
                <para>Core contains all basic functionality to get Coderr running. A minimal set of analysis is done here.</para>
            </remarks>
        </member>
        <member name="T:Coderr.Server.Api.Core.Notifications.AddNotification">
            <summary>
                Add a user notification
            </summary>
            <remarks>
                <para>
                    User notifications are typically used when the user need to do some action (typically due to configuration
                    issues).
                </para>
            </remarks>
        </member>
        <member name="M:Coderr.Server.Api.Core.Notifications.AddNotification.#ctor(System.Int32,System.String)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Notifications.AddNotification" />.
            </summary>
            <param name="accountId">user account id</param>
            <param name="message">message to display</param>
        </member>
        <member name="M:Coderr.Server.Api.Core.Notifications.AddNotification.#ctor(System.String,System.String)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Notifications.AddNotification" />.
            </summary>
            <param name="roleName">Send this message to first user that logs in with the specified role</param>
            <param name="message">Message to display to the user</param>
        </member>
        <member name="M:Coderr.Server.Api.Core.Notifications.AddNotification.#ctor">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Notifications.AddNotification.AccountId">
            <summary>
            Display only for the specified user.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Notifications.AddNotification.HoldbackInterval">
            <summary>
                Amount of time to wait until creating this notification again once the user have read the notification.
            </summary>
            <remarks>
                <para>
                    Requires <see cref="P:Coderr.Server.Api.Core.Notifications.AddNotification.NotificationType" /> to be set.
                </para>
            </remarks>
        </member>
        <member name="P:Coderr.Server.Api.Core.Notifications.AddNotification.Message">
            <summary>
                Message to display to user
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Notifications.AddNotification.NotificationType">
            <summary>
                There may only exist one notification of each type for the target user(s).
            </summary>
            <remarks>
                <para>
                    Set this to a unique value for your module if you want to prevent multiple instances of the same notification
                    to be created. Useful for instance if you sent a configuration failure message when a new report is created.
                    Without this type, the same notification would be created every time a report arrives until the configuration
                    have been corrected.
                </para>
                <para>
                    The notification will be sent again when the user have read it, unless you also have set the hold-back
                    timespan.
                </para>
            </remarks>
        </member>
        <member name="P:Coderr.Server.Api.Core.Notifications.AddNotification.RoleName">
            <summary>
            Display this message for everyone with the given role
            </summary>
            <remarks>
            <para>
            Alternative to <see cref="P:Coderr.Server.Api.Core.Notifications.AddNotification.AccountId"/>.
            </para>
            </remarks>
        </member>
        <member name="T:Coderr.Server.Api.Core.Reports.ContextCollectionDTO">
            <summary>
                Context collection DTO.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Reports.ContextCollectionDTO.#ctor">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Reports.ContextCollectionDTO" />.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Reports.ContextCollectionDTO.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Reports.ContextCollectionDTO" />.
            </summary>
            <param name="name">Name as specified in the client library</param>
            <param name="items">Properties.</param>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.ContextCollectionDTO.Name">
            <summary>
                Name as specified in the client library
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.ContextCollectionDTO.Properties">
            <summary>
                Properties.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Reports.ContextCollectionDTO.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>
                A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Coderr.Server.Api.Core.Reports.NamespaceDoc">
            <summary>
                Reports represent the recieved exception along with all collected context information.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:Coderr.Server.Api.Core.Reports.Queries.GetReport">
            <summary>
                Get report (i.e. exception and context collections)
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Reports.Queries.GetReport.#ctor">
            <summary>
                Serialization constructor.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Reports.Queries.GetReport.#ctor(System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Reports.Queries.GetReport" />.
            </summary>
            <param name="reportId">report</param>
            <exception cref="T:System.ArgumentOutOfRangeException">reportId</exception>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.GetReport.ReportId">
            <summary>
                Report id
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Reports.Queries.GetReportException">
            <summary>
                Partial result for <see cref="T:Coderr.Server.Api.Core.Reports.Queries.GetReportResult" />.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.GetReportException.AssemblyName">
            <summary>
                Assembly that the exception type is declared in.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.GetReportException.BaseClasses">
            <summary>
                Base class names (without namespace). At least "Exception".
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.GetReportException.Everything">
            <summary>
                Typically <c>exception.ToString()</c>
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.GetReportException.FullName">
            <summary>
                Full type name
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.GetReportException.InnerException">
            <summary>
                Inner exception (or null)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.GetReportException.Message">
            <summary>
                Exception.Message
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.GetReportException.Name">
            <summary>
                Exception name (first line of the exception message)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.GetReportException.Namespace">
            <summary>
                Type namespace
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.GetReportException.StackTrace">
            <summary>
                Stack trace.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Reports.Queries.GetReportList">
            <summary>
                Get reports
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Reports.Queries.GetReportList.#ctor(System.Int32)">
            <summary>
                Get reports
            </summary>
            <param name="incidentId">incident to get reports for</param>
        </member>
        <member name="M:Coderr.Server.Api.Core.Reports.Queries.GetReportList.#ctor">
            <summary>
                Serialization constructor.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.GetReportList.IncidentId">
            <summary>
                Incident id.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.GetReportList.PageNumber">
            <summary>
                Page number (one based index)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.GetReportList.PageSize">
            <summary>
                Page size (default is 20).
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Reports.Queries.GetReportListResult">
            <summary>
                Result for <see cref="T:Coderr.Server.Api.Core.Reports.Queries.GetReportList" />.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Reports.Queries.GetReportListResult.#ctor(Coderr.Server.Api.Core.Reports.Queries.GetReportListResultItem[])">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Reports.Queries.GetReportListResult" />.
            </summary>
            <param name="items">Result items</param>
            <exception cref="T:System.ArgumentNullException">items</exception>
        </member>
        <member name="M:Coderr.Server.Api.Core.Reports.Queries.GetReportListResult.#ctor">
            <summary>
                Serialization constructor.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.GetReportListResult.Items">
            <summary>
                Items on this page.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.GetReportListResult.PageNumber">
            <summary>
                Page number being returned
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.GetReportListResult.PageSize">
            <summary>
                Number of items on this page
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.GetReportListResult.TotalCount">
            <summary>
                Total number of items that a non-paged query would return
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Reports.Queries.GetReportListResultItem">
            <summary>
                Item for <see cref="T:Coderr.Server.Api.Core.Reports.Queries.GetReportResult" />.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.GetReportListResultItem.CreatedAtUtc">
            <summary>
                When the report was created in the client library
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.GetReportListResultItem.Id">
            <summary>
                Report id
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.GetReportListResultItem.Message">
            <summary>
                Exception message.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.GetReportListResultItem.RemoteAddress">
            <summary>
                IP that uploaded the report.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Reports.Queries.GetReportResult">
            <summary>
                Result for <see cref="T:Coderr.Server.Api.Core.Reports.Queries.GetReportResult" />.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.GetReportResult.ContextCollections">
            <summary>
                Context collections
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.GetReportResult.CreatedAtUtc">
            <summary>
                When the report was created in the client library
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.GetReportResult.EmailAddress">
            <summary>
                Email address (if the user would like to get status updates).
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.GetReportResult.ErrorId">
            <summary>
                Unique id generated in the client library
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.GetReportResult.Exception">
            <summary>
                Actual exception
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.GetReportResult.Id">
            <summary>
                Report id
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.GetReportResult.IncidentId">
            <summary>
                Incident that this report belongs to.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.GetReportResult.Message">
            <summary>
                First line from the exception message.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.GetReportResult.StackTrace">
            <summary>
                Stack trace
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.GetReportResult.UserFeedback">
            <summary>
                Error description written by the user (if any).
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Reports.Queries.GetReportResultContextCollection">
            <summary>
                Context collection for <see cref="T:Coderr.Server.Api.Core.Reports.Queries.GetReportResultContextCollection" />.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Reports.Queries.GetReportResultContextCollection.#ctor(System.String,Coderr.Server.Api.Core.Reports.Queries.KeyValuePair[])">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Reports.Queries.GetReportResultContextCollection" />.
            </summary>
            <param name="name">collection name</param>
            <param name="properties">all uploaded properties</param>
            <exception cref="T:System.ArgumentNullException">name; properties</exception>
        </member>
        <member name="M:Coderr.Server.Api.Core.Reports.Queries.GetReportResultContextCollection.#ctor">
            <summary>
                Serialization constructor.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.GetReportResultContextCollection.Name">
            <summary>
                Context collection name
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.GetReportResultContextCollection.Properties">
            <summary>
                Properties.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Reports.Queries.KeyValuePair">
            <summary>
                Key value pair
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Reports.Queries.KeyValuePair.#ctor(System.String,System.String)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Core.Reports.Queries.KeyValuePair" />.
            </summary>
            <param name="key">key</param>
            <param name="value">value (null is allowed)</param>
            <exception cref="T:System.ArgumentNullException">key; value</exception>
        </member>
        <member name="M:Coderr.Server.Api.Core.Reports.Queries.KeyValuePair.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.KeyValuePair.Key">
            <summary>
                Key
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.Queries.KeyValuePair.Value">
            <summary>
                Value
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Reports.ReportDTO">
            <summary>
                Report representation.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.ReportDTO.ApplicationId">
            <summary>
                Application that the incident and report belongs in.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.ReportDTO.ContextCollections">
            <summary>
                A collection of context information such as HTTP request information or computer hardware info.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.ReportDTO.CreatedAtUtc">
            <summary>
                Date specified at client side
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.ReportDTO.Exception">
            <summary>
                Exception which was caught.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.ReportDTO.Id">
            <summary>
                DB primary key
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.ReportDTO.IncidentId">
            <summary>
                DB primary key
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.ReportDTO.RemoteAddress">
            <summary>
                Ip of the report uploader.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.ReportDTO.ReportId">
            <summary>
                Gets error id (unique identifier used in communication with the customer to identify this error)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.ReportDTO.ReportVersion">
            <summary>
                Version of the report
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Reports.ReportExeptionDTO">
            <summary>
                Model used to wrap all information from an exception.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Core.Reports.ReportExeptionDTO.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Coderr.Server.Api.Core.Reports.ReportExeptionDTO" /> class.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.ReportExeptionDTO.AssemblyName">
            <summary>
                Assembly name (version included)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.ReportExeptionDTO.BaseClasses">
            <summary>
                Exception base classes. Most specific first: <c>ArgumentOutOfRangeException</c>, <c>ArgumentException</c>,
                <c>Exception</c>.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.ReportExeptionDTO.Everything">
            <summary>
                Everything (<c>exception.ToString()</c>)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.ReportExeptionDTO.FullName">
            <summary>
                Full type name (namespace + class name)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.ReportExeptionDTO.InnerException">
            <summary>
                Inner exception (if any; otherwise <c>null</c>).
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.ReportExeptionDTO.Message">
            <summary>
                Exception message
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.ReportExeptionDTO.Name">
            <summary>
                Type name
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.ReportExeptionDTO.Namespace">
            <summary>
                Namespace that the exception is in
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.ReportExeptionDTO.Properties">
            <summary>
                All properties (public and private)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Reports.ReportExeptionDTO.StackTrace">
            <summary>
                Stack trace, line numbers included if your app also distributes the PDB files.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Support.NamespaceDoc">
            <summary>
                Used to get support from Gauffin Interactive AB
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:Coderr.Server.Api.Core.Support.SendSupportRequest">
            <summary>
                Send a support request to 1TCompany AB
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Support.SendSupportRequest.Message">
            <summary>
                Problem statement
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Support.SendSupportRequest.Subject">
            <summary>
                Why do we want support, huh?
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Support.SendSupportRequest.Url">
            <summary>
                Url of the page that did not work
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Users.Commands.UpdateNotifications">
            <summary>
                Update user notifications
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Users.Commands.UpdateNotifications.ApplicationId">
            <summary>
                Application that the settings is for (0 = general settings)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Users.Commands.UpdateNotifications.NotifyOnNewIncidents">
            <summary>
                How to notify when a new incident is created (received an unique exception)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Users.Commands.UpdateNotifications.NotifyOnNewReport">
            <summary>
                How to notify when a new report is created (receive an exception)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Users.Commands.UpdateNotifications.NotifyOnPeaks">
            <summary>
                How to notify user when a peak is detected
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Users.Commands.UpdateNotifications.NotifyOnReOpenedIncident">
            <summary>
                How to notify when we receive a new report on a closed incident.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Users.Commands.UpdateNotifications.NotifyOnUserFeedback">
            <summary>
                How to notify when an user have written an error description
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Users.Commands.UpdateNotifications.UserId">
            <summary>
                User that configured its settings.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Users.Commands.UpdatePersonalSettings">
            <summary>
                Update personal settings.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Users.Commands.UpdatePersonalSettings.EmailAddress">
            <summary>
                Change email address
            </summary>
            <remarks>
                <para>
                    Do not required additional verification, we trust the user once it has an activated account.
                </para>
            </remarks>
        </member>
        <member name="P:Coderr.Server.Api.Core.Users.Commands.UpdatePersonalSettings.FirstName">
            <summary>
                First name (if specified)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Users.Commands.UpdatePersonalSettings.LastName">
            <summary>
                Last name (if specified)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Users.Commands.UpdatePersonalSettings.MobileNumber">
            <summary>
                Mobile number (E.164 formatted)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Users.Commands.UpdatePersonalSettings.UserId">
            <summary>
                Account that the settings are for
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Users.NamespaceDoc">
            <summary>
                User related information (such as name, notifcation settings etc.)
            </summary>
            <remarks>
                <para>
                    While accounts are for login authentication and authorization, users are for information about the
                    individual.
                </para>
            </remarks>
        </member>
        <member name="T:Coderr.Server.Api.Core.Users.NotificationSettings">
            <summary>
                Notification settings for <see cref="T:Coderr.Server.Api.Core.Users.Queries.GetUserSettingsResult" />.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Users.NotificationSettings.NotifyOnNewIncidents">
            <summary>
                How to notify when a new incident is created (received an unique exception)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Users.NotificationSettings.NotifyOnNewReport">
            <summary>
                How to notify when a new report is created (receive an exception)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Users.NotificationSettings.NotifyOnPeaks">
            <summary>
                How to notify user when a peak is detected
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Users.NotificationSettings.NotifyOnReOpenedIncident">
            <summary>
                How to notify when we receive a new report on a closed incident.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Users.NotificationSettings.NotifyOnUserFeedback">
            <summary>
                How to notify when an user have written an error description
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Users.NotificationState">
            <summary>
                Type of notification to use
            </summary>
        </member>
        <member name="F:Coderr.Server.Api.Core.Users.NotificationState.UseGlobalSetting">
            <summary>
                Use global setting
            </summary>
        </member>
        <member name="F:Coderr.Server.Api.Core.Users.NotificationState.Disabled">
            <summary>
                Do not notify
            </summary>
        </member>
        <member name="F:Coderr.Server.Api.Core.Users.NotificationState.Cellphone">
            <summary>
                By cellphone (text message)
            </summary>
        </member>
        <member name="F:Coderr.Server.Api.Core.Users.NotificationState.Email">
            <summary>
                By email
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Users.Queries.GetUserSettings">
            <summary>
                Get settings for an user.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Users.Queries.GetUserSettings.ApplicationId">
            <summary>
                Get user settings for this application only
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Users.Queries.GetUserSettings.UserId">
            <summary>
                User to get settings for
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Core.Users.Queries.GetUserSettingsResult">
            <summary>
                Result for <see cref="T:Coderr.Server.Api.Core.Users.Queries.GetUserSettings" />
            </summary>
            <remarks>
                <para>
                    All settings are system wide except for <see cref="P:Coderr.Server.Api.Core.Users.Queries.GetUserSettingsResult.Notifications" />.
                </para>
            </remarks>
        </member>
        <member name="P:Coderr.Server.Api.Core.Users.Queries.GetUserSettingsResult.EmailAddress">
            <summary>
                From the user account, always specified.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Users.Queries.GetUserSettingsResult.FirstName">
            <summary>
                First name (optional)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Users.Queries.GetUserSettingsResult.LastName">
            <summary>
                Last name (optional)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Users.Queries.GetUserSettingsResult.MobileNumber">
            <summary>
                Cell phone number (optional, but required for text notifications).
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Core.Users.Queries.GetUserSettingsResult.Notifications">
            <summary>
                Application specific settings
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.EnumExtensions">
            <summary>
                Extensions making it easier to work with enums
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.EnumExtensions.ConvertEnum``1(System.Enum)">
            <summary>
                Convert from one enum type to another
            </summary>
            <typeparam name="TTo">Type to convert to</typeparam>
            <param name="source">source</param>
            <returns>Converted enum value</returns>
            <remarks>
                <para>
                    Does the conversion by translating the value to a string and then parsing it. That chocie was made
                    since the same value might exist in both enums by representing different fields.
                </para>
            </remarks>
            <exception cref="T:System.FormatException">Source enum value was not found in the target type.</exception>
        </member>
        <member name="T:Coderr.Server.Api.EventAttribute">
            <summary>
            Marks a DTO as an event.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.IgnoreFieldAttribute">
            <summary>
                Used to make the typescript compiler ignore certain properties and types.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.MessageAttribute">
            <summary>
            Used to mark classes as DTOs (to be able to index and process them)
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Modules.ContextData.Queries.GetSimilarities">
            <summary>
                Get similarities (i.e. analyzed context collections where we have normalized values and checked which values are
                more frequently occurring).
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Modules.ContextData.Queries.GetSimilarities.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Modules.ContextData.Queries.GetSimilarities.#ctor(System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Modules.ContextData.Queries.GetSimilarities" />.
            </summary>
            <param name="incidentId">incident to get similarities for</param>
            <exception cref="T:System.ArgumentOutOfRangeException">incidentId</exception>
        </member>
        <member name="P:Coderr.Server.Api.Modules.ContextData.Queries.GetSimilarities.IncidentId">
            <summary>
                incident to get similarities for
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Modules.ContextData.Queries.GetSimilaritiesCollection">
            <summary>
                Context collection for <see cref="T:Coderr.Server.Api.Modules.ContextData.Queries.GetSimilaritiesResult" />.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.ContextData.Queries.GetSimilaritiesCollection.Name">
            <summary>
                Name of this collection.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.ContextData.Queries.GetSimilaritiesCollection.Similarities">
            <summary>
                An analyzed property and all its values.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Modules.ContextData.Queries.GetSimilaritiesCollection.Add(Coderr.Server.Api.Modules.ContextData.Queries.GetSimilaritiesSimilarity)">
            <summary>
                Add an analyzed property.
            </summary>
            <param name="similarity">property + values</param>
            <exception cref="T:System.ArgumentNullException">similarity</exception>
        </member>
        <member name="T:Coderr.Server.Api.Modules.ContextData.Queries.GetSimilaritiesResult">
            <summary>
                Result for <see cref="T:Coderr.Server.Api.Modules.ContextData.Queries.GetSimilarities" />.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.ContextData.Queries.GetSimilaritiesResult.Collections">
            <summary>
                All analyzed context collections
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Modules.ContextData.Queries.GetSimilaritiesSimilarity">
            <summary>
                A property in <see cref="T:Coderr.Server.Api.Modules.ContextData.Queries.GetSimilaritiesCollection" />.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Modules.ContextData.Queries.GetSimilaritiesSimilarity.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Modules.ContextData.Queries.GetSimilaritiesSimilarity" />.
            </summary>
            <param name="name">Property name</param>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="M:Coderr.Server.Api.Modules.ContextData.Queries.GetSimilaritiesSimilarity.#ctor">
            <summary>
                Serialization constructor.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.ContextData.Queries.GetSimilaritiesSimilarity.Name">
            <summary>
                Name of this similarity.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.ContextData.Queries.GetSimilaritiesSimilarity.Values">
            <summary>
                The different values that this one have got.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Modules.ContextData.Queries.GetSimilaritiesValue">
            <summary>
                A single value for <see cref="T:Coderr.Server.Api.Modules.ContextData.Queries.GetSimilaritiesSimilarity" />.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Modules.ContextData.Queries.GetSimilaritiesValue.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Modules.ContextData.Queries.GetSimilaritiesValue" />.
            </summary>
            <param name="value">Value, null is allowed</param>
            <param name="percentage">0-100</param>
            <param name="count">Number of times that this value have been received.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:Coderr.Server.Api.Modules.ContextData.Queries.GetSimilaritiesValue.Count">
            <summary>
                Number of times that this value have been found in an error report.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.ContextData.Queries.GetSimilaritiesValue.Percentage">
            <summary>
                0-100
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.ContextData.Queries.GetSimilaritiesValue.Value">
            <summary>
                Value for this item
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Modules.ErrorOrigins.Queries.GetOriginsForIncident">
            <summary>
                Get all error origins for the specified incident.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Modules.ErrorOrigins.Queries.GetOriginsForIncident.#ctor(System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Modules.ErrorOrigins.Queries.GetOriginsForIncident" />.
            </summary>
            <param name="incidentId">incident to get error origins for</param>
            <exception cref="T:System.ArgumentOutOfRangeException">incidentId &lt; 1</exception>
        </member>
        <member name="M:Coderr.Server.Api.Modules.ErrorOrigins.Queries.GetOriginsForIncident.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.ErrorOrigins.Queries.GetOriginsForIncident.IncidentId">
            <summary>
                Incident to get origins for
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Modules.ErrorOrigins.Queries.GetOriginsForIncidentResult">
            <summary>
                Result for <see cref="T:Coderr.Server.Api.Modules.ErrorOrigins.Queries.GetOriginsForIncident" />.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.ErrorOrigins.Queries.GetOriginsForIncidentResult.Items">
            <summary>
                One item per geographic location
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Modules.ErrorOrigins.Queries.GetOriginsForIncidentResultItem">
            <summary>
                Item for <see cref="T:Coderr.Server.Api.Modules.ErrorOrigins.Queries.GetOriginsForIncidentResult" />.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.ErrorOrigins.Queries.GetOriginsForIncidentResultItem.Latitude">
            <summary>
                Latitude
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.ErrorOrigins.Queries.GetOriginsForIncidentResultItem.Longitude">
            <summary>
                Longitude
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.ErrorOrigins.Queries.GetOriginsForIncidentResultItem.NumberOfErrorReports">
            <summary>
                Number of error reports that have been received from this incident
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Modules.Tagging.Events.TagAttachedToIncident">
            <summary>
                New tag(s) have been identified for the processed incident.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Modules.Tagging.Events.TagAttachedToIncident.#ctor(System.Int32,Coderr.Server.Api.Modules.Tagging.TagDTO[])">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Modules.Tagging.Events.TagAttachedToIncident" />.
            </summary>
            <param name="incidentId">Incident being processed</param>
            <param name="tags">tags</param>
            <exception cref="T:System.ArgumentNullException">tags</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">incidentId</exception>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Tagging.Events.TagAttachedToIncident.IncidentId">
            <summary>
                Incident being processed
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Tagging.Events.TagAttachedToIncident.Tags">
            <summary>
                Identified tags
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Modules.Tagging.Queries.GetTags">
            <summary>
                Get all tags that the system have identified for an incident.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Tagging.Queries.GetTags.ApplicationId">
            <summary>
                Application to get tags for
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Tagging.Queries.GetTags.IncidentId">
            <summary>
                Incident to get tags for
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Modules.Tagging.Queries.GetTagsForApplication">
            <summary>
                Get all tags that the system have identified for an incident.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Modules.Tagging.Queries.GetTagsForApplication.#ctor(System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Modules.Tagging.Queries.GetTagsForIncident" />.
            </summary>
            <param name="applicationId">Incident to get tags for</param>
            <exception cref="T:System.ArgumentOutOfRangeException">incidentId</exception>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Tagging.Queries.GetTagsForApplication.ApplicationId">
            <summary>
                Incident to get tags for
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Modules.Tagging.Queries.GetTagsForIncident">
            <summary>
                Get all tags that the system have identified for an incident.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Modules.Tagging.Queries.GetTagsForIncident.#ctor(System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Modules.Tagging.Queries.GetTagsForIncident" />.
            </summary>
            <param name="incidentId">Incident to get tags for</param>
            <exception cref="T:System.ArgumentOutOfRangeException">incidentId</exception>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Tagging.Queries.GetTagsForIncident.IncidentId">
            <summary>
                Incident to get tags for
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Modules.Tagging.TagDTO">
            <summary>
                A stack overflow tag
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Tagging.TagDTO.Name">
            <summary>
                Name
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Tagging.TagDTO.OrderNumber">
            <summary>
                Used to sort tags before displaying them.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Modules.Triggers.Commands.CreateTrigger">
            <summary>
                Create a new trigger
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Modules.Triggers.Commands.CreateTrigger.#ctor(System.Int32,System.String)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Modules.Triggers.Commands.CreateTrigger" />.
            </summary>
            <param name="applicationId">Application that the trigger is for.</param>
            <param name="name">Trigger name</param>
        </member>
        <member name="M:Coderr.Server.Api.Modules.Triggers.Commands.CreateTrigger.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Commands.CreateTrigger.Actions">
            <summary>
                Actions to run
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Commands.CreateTrigger.ApplicationId">
            <summary>
                Application that the trigger belongs to.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Commands.CreateTrigger.Description">
            <summary>
                What the trigger does and why
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Commands.CreateTrigger.Id">
            <summary>
                Primary key
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Commands.CreateTrigger.LastTriggerAction">
            <summary>
                Action to take after all <see cref="P:Coderr.Server.Api.Modules.Triggers.Commands.CreateTrigger.Actions" /> have run.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Commands.CreateTrigger.Name">
            <summary>
                Trigger name.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Commands.CreateTrigger.Rules">
            <summary>
                Rules that determine if this trigger can run.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Commands.CreateTrigger.RunForExistingIncidents">
            <summary>
                Run trigger for existing incidents (received a duplicate exception)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Commands.CreateTrigger.RunForNewIncidents">
            <summary>
                Run trigger for new incidents (i.e. received a new unique exception)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Commands.CreateTrigger.RunForReOpenedIncidents">
            <summary>
                Run for incidents that is closed but received a new error report.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Modules.Triggers.Commands.DeleteTrigger">
            <summary>
                Delete a trigger
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Modules.Triggers.Commands.DeleteTrigger.#ctor(System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Modules.Triggers.Commands.DeleteTrigger" />.
            </summary>
            <param name="id">primary key</param>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Commands.DeleteTrigger.Id">
            <summary>
                Primary key
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Modules.Triggers.Commands.UpdateTrigger">
            <summary>
                Update an existing trigger
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Modules.Triggers.Commands.UpdateTrigger.#ctor(System.Int32,System.String)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Modules.Triggers.Commands.UpdateTrigger" />.
            </summary>
            <param name="id">trigger identity.</param>
            <param name="name">Trigger name</param>
        </member>
        <member name="M:Coderr.Server.Api.Modules.Triggers.Commands.UpdateTrigger.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Commands.UpdateTrigger.Actions">
            <summary>
                Actions to run
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Commands.UpdateTrigger.Description">
            <summary>
                What the trigger does and why
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Commands.UpdateTrigger.Id">
            <summary>
                Primary key
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Commands.UpdateTrigger.LastTriggerAction">
            <summary>
                Action to take after all <see cref="P:Coderr.Server.Api.Modules.Triggers.Commands.UpdateTrigger.Actions" /> have run.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Commands.UpdateTrigger.Name">
            <summary>
                Trigger name.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Commands.UpdateTrigger.Rules">
            <summary>
                Rules that determine if this trigger can run.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Commands.UpdateTrigger.RunForExistingIncidents">
            <summary>
                Run trigger for existing incidents (received a duplicate exception)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Commands.UpdateTrigger.RunForNewIncidents">
            <summary>
                Run trigger for new incidents (i.e. received a new unique exception)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Commands.UpdateTrigger.RunForReOpenedIncidents">
            <summary>
                Run for incidents that is closed but received a new error report.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Modules.Triggers.LastTriggerActionDTO">
            <summary>
                What to do if all rules accepted the report.
            </summary>
        </member>
        <member name="F:Coderr.Server.Api.Modules.Triggers.LastTriggerActionDTO.ExecuteActions">
            <summary>
                Execute trigger actions.
            </summary>
        </member>
        <member name="F:Coderr.Server.Api.Modules.Triggers.LastTriggerActionDTO.AbortTrigger">
            <summary>
                Abort the trigger
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Modules.Triggers.Queries.GetContextCollectionMetadata">
            <summary>
                Get metadata (context collection information)
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Modules.Triggers.Queries.GetContextCollectionMetadata.#ctor(System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Modules.Triggers.Queries.GetContextCollectionMetadata" />.
            </summary>
            <param name="applicationId">applicationId</param>
            <exception cref="T:System.ArgumentOutOfRangeException">applicationId</exception>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Queries.GetContextCollectionMetadata.ApplicationId">
            <summary>
                Application to get info for.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Modules.Triggers.Queries.GetContextCollectionMetadataItem">
            <summary>
                Result item for <see cref="T:Coderr.Server.Api.Modules.Triggers.Queries.GetContextCollectionMetadata" />
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Queries.GetContextCollectionMetadataItem.Name">
            <summary>
                Context name
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Queries.GetContextCollectionMetadataItem.Properties">
            <summary>
                Property names
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Modules.Triggers.Queries.GetTrigger">
            <summary>
                Get a configured trigger
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Modules.Triggers.Queries.GetTrigger.#ctor(System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Modules.Triggers.Queries.GetTrigger" />.
            </summary>
            <param name="id">trigger id</param>
            <exception cref="T:System.ArgumentOutOfRangeException">id</exception>
        </member>
        <member name="M:Coderr.Server.Api.Modules.Triggers.Queries.GetTrigger.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Queries.GetTrigger.Id">
            <summary>
                Triggger id
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Modules.Triggers.Queries.GetTriggerDTO">
            <summary>
                Result for <see cref="T:Coderr.Server.Api.Modules.Triggers.Queries.GetTrigger" />
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Queries.GetTriggerDTO.Actions">
            <summary>
                Actions to take if all rules says OK.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Queries.GetTriggerDTO.ApplicationId">
            <summary>
                Application that the trigger is for.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Queries.GetTriggerDTO.Description">
            <summary>
                What the trigger does.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Queries.GetTriggerDTO.Id">
            <summary>
                Trigger id
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Queries.GetTriggerDTO.LastTriggerAction">
            <summary>
                Decision to use if all rules have been passed.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Queries.GetTriggerDTO.Name">
            <summary>
                Trigger name
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Queries.GetTriggerDTO.Rules">
            <summary>
                Rules deciding if actions can be run.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Queries.GetTriggerDTO.RunForExistingIncidents">
            <summary>
                Run for incidents that already has one or more reports.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Queries.GetTriggerDTO.RunForNewIncidents">
            <summary>
                Run trigger for new incidents (got a new unqiue exception)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Queries.GetTriggerDTO.RunForReOpenedIncidents">
            <summary>
                Run when a closed incident get its first new report.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Modules.Triggers.Queries.GetTriggersForApplication">
            <summary>
                Get all triggers for an application
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Modules.Triggers.Queries.GetTriggersForApplication.#ctor(System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Modules.Triggers.Queries.GetTriggersForApplication" />.
            </summary>
            <param name="applicationId">application to get triggers for</param>
            <exception cref="T:System.ArgumentOutOfRangeException">applicationId</exception>
        </member>
        <member name="M:Coderr.Server.Api.Modules.Triggers.Queries.GetTriggersForApplication.#ctor">
            <summary>
                Serialization constructor.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.Queries.GetTriggersForApplication.ApplicationId">
            <summary>
                Application
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Modules.Triggers.TriggerActionDataDTO">
            <summary>
                DTO
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.TriggerActionDataDTO.ActionContext">
            <summary>
                Action context
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.TriggerActionDataDTO.ActionName">
            <summary>
                Action name
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Modules.Triggers.TriggerContextRule">
            <summary>
                Context when doing the filtering
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.TriggerContextRule.ContextName">
            <summary>
                Context name currently being inspected
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.TriggerContextRule.PropertyName">
            <summary>
                Property in that context
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.TriggerContextRule.PropertyValue">
            <summary>
                Value
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Modules.Triggers.TriggerDTO">
            <summary>
                Trigger DTO
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.TriggerDTO.Description">
            <summary>
                Description (typically why it was created and what it should do)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.TriggerDTO.Id">
            <summary>
                Identity
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.TriggerDTO.Name">
            <summary>
                Trigger name
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.TriggerDTO.Summary">
            <summary>
                Short summary
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Modules.Triggers.TriggerExceptionRule">
            <summary>
                Make a decision based on exception information
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.TriggerExceptionRule.FieldName">
            <summary>
                Field in the exception details that should be inspected (property name from the Exception class)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.TriggerExceptionRule.Value">
            <summary>
                Value that should be matched.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Modules.Triggers.TriggerFilterCondition">
            <summary>
                Filter condition
            </summary>
        </member>
        <member name="F:Coderr.Server.Api.Modules.Triggers.TriggerFilterCondition.StartsWith">
            <summary>
                Inspected value should start with the filter string
            </summary>
        </member>
        <member name="F:Coderr.Server.Api.Modules.Triggers.TriggerFilterCondition.EndsWith">
            <summary>
                Inspected value should end with the filter string
            </summary>
        </member>
        <member name="F:Coderr.Server.Api.Modules.Triggers.TriggerFilterCondition.Contains">
            <summary>
                Inspected value should contain the filter string
            </summary>
        </member>
        <member name="F:Coderr.Server.Api.Modules.Triggers.TriggerFilterCondition.DoNotContain">
            <summary>
                Inspected value should not contain the filter string
            </summary>
        </member>
        <member name="F:Coderr.Server.Api.Modules.Triggers.TriggerFilterCondition.Equals">
            <summary>
                Inspected value should equal the filter string (case insensitive)
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Modules.Triggers.TriggerRuleAction">
            <summary>
                Action to take when a filter is apssed
            </summary>
        </member>
        <member name="F:Coderr.Server.Api.Modules.Triggers.TriggerRuleAction.AbortTrigger">
            <summary>
                Do not execute the trigger
            </summary>
        </member>
        <member name="F:Coderr.Server.Api.Modules.Triggers.TriggerRuleAction.ContinueWithNextRule">
            <summary>
                Middle manager principle: Lets delegate the decision to the next rule.
            </summary>
        </member>
        <member name="F:Coderr.Server.Api.Modules.Triggers.TriggerRuleAction.ExecuteActions">
            <summary>
                Do not check any more rules, just execute the god damn trigger.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Modules.Triggers.TriggerRuleBase">
            <summary>
                Base class for rules.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.TriggerRuleBase.Filter">
            <summary>
                Filter that should be passed
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Triggers.TriggerRuleBase.ResultToUse">
            <summary>
                Did we pass the filter? Then do this.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Modules.Versions.Queries.GetApplicationVersions">
            <summary>
                Get all application versions that we've received incidents for
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Modules.Versions.Queries.GetApplicationVersions.#ctor(System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Modules.Versions.Queries.GetApplicationVersions" />.
            </summary>
            <param name="applicationId">application to get versions for</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Versions.Queries.GetApplicationVersions.ApplicationId">
            <summary>
                Application id
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Modules.Versions.Queries.GetApplicationVersionsResult">
            <summary>
                Result for <see cref="T:Coderr.Server.Api.Modules.Versions.Queries.GetApplicationVersions" />
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Versions.Queries.GetApplicationVersionsResult.Items">
            <summary>
                All versions
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Modules.Versions.Queries.GetApplicationVersionsResultItem">
            <summary>
                Version information
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Versions.Queries.GetApplicationVersionsResultItem.FirstReportReceivedAtUtc">
            <summary>
                When we received the first incident for this application
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Versions.Queries.GetApplicationVersionsResultItem.IncidentCount">
            <summary>
                Number of new incidents
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Versions.Queries.GetApplicationVersionsResultItem.LastReportReceivedAtUtc">
            <summary>
                When we received the most recent report for this version
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Versions.Queries.GetApplicationVersionsResultItem.ReportCount">
            <summary>
                Number of reports (for old and new incidents)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Versions.Queries.GetApplicationVersionsResultItem.Version">
            <summary>
                Version string (x.x.x.x)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Versions.Queries.GetVersionHistoryResult.Dates">
            <summary>
            Year-Month
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Versions.Queries.GetVersionHistoryResult.IncidentCounts">
            <summary>
            Key = version name, Value = number of incidents for the  month
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Modules.Versions.Queries.GetVersionHistoryResult.ReportCounts">
            <summary>
            Key = version name, Value = number of error reports for the  month
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.NamespaceDoc">
            <summary>
                API
            </summary>
            <remarks>
                <para>The API is based on Command/Queries and events. </para>
                <para>
                    Commands can be seen as the write model. All operations is done with the
                    help of commands. A command is not an atomic unit, but do in most cases represent an use case.
                </para>
                <para>
                    Queries are the read model in the application. They are used to fetch information. Queries are idempotent and
                    may not change
                    application state.
                </para>
                <para>
                    Events are used to allow different parts of the application to talk. The publisher are not aware of if there
                    are any
                    subscribers or how many there are. The subscriber have no knowledge about who published the event.
                </para>
                <h1 id="Implementations">Implementations</h1>
                <para>
                    There is a tool in the &quot;Tool&quot; root folder which are used to generate Typescript classes from these
                    APIs. The <c>.ts</c> files can be
                    invoked using Ajax directly from the web.
                </para>
                <para>
                    You can also invoke the DTOs directly from your application using a HTTP client. Serialize the DTO as JSON and
                    then include
                    <c>X-Cqs-Object-Type</c> as a HTTP header. It should contain the assembly qualified type name of the DTO.
                </para>
                <para>Basic authentication is used. Thus we recommend that you run the site using SSL.</para>
            </remarks>
        </member>
        <member name="T:Coderr.Server.Api.Web.Feedback.Queries.GetFeedbackForApplicationPage">
            <summary>
                Get all feedback that is for a specific application
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Web.Feedback.Queries.GetFeedbackForApplicationPage.#ctor(System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Web.Feedback.Queries.GetFeedbackForApplicationPage" />.
            </summary>
            <param name="applicationId">application id</param>
            <exception cref="T:System.ArgumentOutOfRangeException">applicationId</exception>
        </member>
        <member name="M:Coderr.Server.Api.Web.Feedback.Queries.GetFeedbackForApplicationPage.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Web.Feedback.Queries.GetFeedbackForApplicationPage.ApplicationId">
            <summary>
                Application id
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Web.Feedback.Queries.GetFeedbackForApplicationPageResult">
            <summary>
                Result for <see cref="T:Coderr.Server.Api.Web.Feedback.Queries.GetFeedbackForApplicationPage" />
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Web.Feedback.Queries.GetFeedbackForApplicationPageResult.Emails">
            <summary>
                All emails (included in the first page)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Web.Feedback.Queries.GetFeedbackForApplicationPageResult.Items">
            <summary>
                items on this page
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Web.Feedback.Queries.GetFeedbackForApplicationPageResult.TotalCount">
            <summary>
                Total number of items
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Web.Feedback.Queries.GetFeedbackForApplicationPageResultItem">
            <summary>
                Result item for <see cref="T:Coderr.Server.Api.Web.Feedback.Queries.GetFeedbackForApplicationPageResult" />.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Web.Feedback.Queries.GetFeedbackForApplicationPageResultItem.EmailAddress">
            <summary>
                Email adress to the user (if the user want to get status updates for the incident)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Web.Feedback.Queries.GetFeedbackForApplicationPageResultItem.IncidentId">
            <summary>
                Incident that the feedback belongs to
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Web.Feedback.Queries.GetFeedbackForApplicationPageResultItem.IncidentName">
            <summary>
                Incident name (typically first line of the exception message)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Web.Feedback.Queries.GetFeedbackForApplicationPageResultItem.Message">
            <summary>
                Error description written by the user that experienced the error.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Web.Feedback.Queries.GetFeedbackForApplicationPageResultItem.WrittenAtUtc">
            <summary>
                When the user wrote the feedback
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Web.Feedback.Queries.GetFeedbackForDashboardPage">
            <summary>
                Get given feedback for all applications.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Web.Feedback.Queries.GetFeedbackForDashboardPageResult">
            <summary>
                Result for <see cref="T:Coderr.Server.Api.Web.Feedback.Queries.GetFeedbackForDashboardPage" />
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Web.Feedback.Queries.GetFeedbackForDashboardPageResult.Emails">
            <summary>
                Emails to all users that are waiting on status updates.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Web.Feedback.Queries.GetFeedbackForDashboardPageResult.Items">
            <summary>
                Items on the requested page.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Web.Feedback.Queries.GetFeedbackForDashboardPageResult.TotalCount">
            <summary>
                Total number of feedback entries
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Web.Feedback.Queries.GetFeedbackForDashboardPageResultItem">
            <summary>
                Result item for <see cref="T:Coderr.Server.Api.Web.Feedback.Queries.GetFeedbackForDashboardPageResult" />
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Web.Feedback.Queries.GetFeedbackForDashboardPageResultItem.ApplicationId">
            <summary>
                Application that the feedback was written for
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Web.Feedback.Queries.GetFeedbackForDashboardPageResultItem.ApplicationName">
            <summary>
                Name of the application.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Web.Feedback.Queries.GetFeedbackForDashboardPageResultItem.EmailAddress">
            <summary>
                Email adress to the user (if the user want to get status updates for the incident)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Web.Feedback.Queries.GetFeedbackForDashboardPageResultItem.Message">
            <summary>
                Error description written by the user that experienced the error.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Web.Feedback.Queries.GetFeedbackForDashboardPageResultItem.WrittenAtUtc">
            <summary>
                When the user wrote the feedback
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Web.Feedback.Queries.GetIncidentFeedback">
            <summary>
                Lists all feedback which has been made for an incident
            </summary>
            <remarks>
                <para>Will only fetch for the most specific id</para>
            </remarks>
        </member>
        <member name="M:Coderr.Server.Api.Web.Feedback.Queries.GetIncidentFeedback.#ctor(System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Web.Feedback.Queries.GetIncidentFeedback" />.
            </summary>
            <param name="incidentId">Incident to get feedback for</param>
            <exception cref="T:System.ArgumentOutOfRangeException">incidentId</exception>
        </member>
        <member name="P:Coderr.Server.Api.Web.Feedback.Queries.GetIncidentFeedback.IncidentId">
            <summary>
                Incident to get feedback for
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Web.Feedback.Queries.GetIncidentFeedbackResult">
            <summary>
                Result for <see cref="T:Coderr.Server.Api.Web.Feedback.Queries.GetIncidentFeedback" />.
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Web.Feedback.Queries.GetIncidentFeedbackResult.#ctor(System.Collections.Generic.IReadOnlyList{Coderr.Server.Api.Web.Feedback.Queries.GetIncidentFeedbackResultItem},System.Collections.Generic.ICollection{System.String})">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Web.Feedback.Queries.GetIncidentFeedbackResult" />.
            </summary>
            <param name="items">Feedback items</param>
            <param name="emails">Emails to all users that are waiting on status updates.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Coderr.Server.Api.Web.Feedback.Queries.GetIncidentFeedbackResult.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Web.Feedback.Queries.GetIncidentFeedbackResult.Emails">
            <summary>
                Emails to all users that are waiting on status updates.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Web.Feedback.Queries.GetIncidentFeedbackResult.Items">
            <summary>
                Items
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Web.Feedback.Queries.GetIncidentFeedbackResultItem">
            <summary>
                Result item for <see cref="T:Coderr.Server.Api.Web.Feedback.Queries.GetIncidentFeedbackResult" />.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Web.Feedback.Queries.GetIncidentFeedbackResultItem.EmailAddress">
            <summary>
                Email if user can be contacted.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Web.Feedback.Queries.GetIncidentFeedbackResultItem.Message">
            <summary>
                Error description written by the user that experienced the error
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Web.Feedback.Queries.GetIncidentFeedbackResultItem.WrittenAtUtc">
            <summary>
                When the feedback was written
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Web.Overview.Queries.GetOverview">
            <summary>
                Get an Coderr summary (typically shown in the chart and right panel summary)
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Web.Overview.Queries.GetOverview.NumberOfDays">
            <summary>
                Amount of time to look back (i.e. startdate = DateTime.Now.Substract(WindowSize))
            </summary>
            <remarks>
                1 = switch to hours
            </remarks>
        </member>
        <member name="T:Coderr.Server.Api.Web.Overview.Queries.GetOverviewApplicationResult">
            <summary>
                Application specific result for <see cref="T:Coderr.Server.Api.Web.Overview.Queries.GetOverview" />
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Web.Overview.Queries.GetOverviewApplicationResult.#ctor(System.String,System.DateTime,System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Server.Api.Web.Overview.Queries.GetOverviewApplicationResult" />.
            </summary>
            <param name="label">Application name</param>
            <param name="startDate">first day in sequence</param>
            <param name="days">Number of days that this result contains</param>
            <exception cref="T:System.ArgumentNullException">label</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">days</exception>
        </member>
        <member name="M:Coderr.Server.Api.Web.Overview.Queries.GetOverviewApplicationResult.#ctor">
            <summary>
                Serialization constructor
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Web.Overview.Queries.GetOverviewApplicationResult.Label">
            <summary>
                Label
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Web.Overview.Queries.GetOverviewApplicationResult.Values">
            <summary>
                Values, one per day
            </summary>
        </member>
        <member name="M:Coderr.Server.Api.Web.Overview.Queries.GetOverviewApplicationResult.AddValue(System.DateTime,System.Int32)">
            <summary>
                Add another value
            </summary>
            <param name="date">Date</param>
            <param name="value">Value</param>
            <exception cref="T:System.ArgumentOutOfRangeException">value &lt; 0</exception>
        </member>
        <member name="T:Coderr.Server.Api.Web.Overview.Queries.GetOverviewResult">
            <summary>
                Result for <see cref="T:Coderr.Server.Api.Web.Overview.Queries.GetOverview" />.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Web.Overview.Queries.GetOverviewResult.Days">
            <summary>
                1 = switch to hours for incidents and reports.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Web.Overview.Queries.GetOverviewResult.IncidentsPerApplication">
            <summary>
                One collection per application
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Web.Overview.Queries.GetOverviewResult.StatSummary">
            <summary>
                Aggregated summary
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Web.Overview.Queries.GetOverviewResult.TimeAxisLabels">
            <summary>
                Labels for the time axis (X-axis) in the chart.
            </summary>
        </member>
        <member name="T:Coderr.Server.Api.Web.Overview.Queries.OverviewStatSummary">
            <summary>
                Stats for the last X days, part of <see cref="T:Coderr.Server.Api.Web.Overview.Queries.GetOverviewResult" />.
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Web.Overview.Queries.OverviewStatSummary.Followers">
            <summary>
                Number of followers
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Web.Overview.Queries.OverviewStatSummary.Incidents">
            <summary>
                Number of incidents
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Web.Overview.Queries.OverviewStatSummary.Reports">
            <summary>
                Number of reports received
            </summary>
        </member>
        <member name="P:Coderr.Server.Api.Web.Overview.Queries.OverviewStatSummary.UserFeedback">
            <summary>
                Number user feedback items
            </summary>
        </member>
    </members>
</doc>
